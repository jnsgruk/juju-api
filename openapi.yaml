openapi: 3.1.0
info:
  title: "Juju Client API"
  summary: Next generation Juju client API draft.
  description: |
    This specification represents early but ongoing design work for a next-generation, RESTful Juju
    client API. It **should not** be used as reference for any currently released version of Juju,
    and is unlikely to be implemented until some time in 2024.

    The source code for this page, and the OpenAPI specification can be found on
    [Github](https://github.com/jnsgruk/juju-api). You can also find a progress tracker that
    indicates which of the prior facade calls have been covered by this design.

    The [OpenAPI Spec](https://github.com/jnsgruk/juju-api/blob/main/openapi.yaml) can be entered
    directly into the [Swagger Editor](https://editor-next.swagger.io/) for a slightly different
    experience when exploring the API if preferable.

    In addition to the new design, there is a [naive
    conversion](https://jnsgruk.github.io/juju-api/generated.html) of the existing Juju facade
    schema available. This was generated from the upstream
    [schema.json](https://github.com/juju/juju/blob/3.3/apiserver/facades/schema.json) and is used
    solely for the purposes of reference, and enables existing schemas to be easily reused during
    the design on the new API where appropriate.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: jon.seager@canonical.com
  license:
    name: AGPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: "1.0"
externalDocs:
  description: Find out more about Juju.
  url: http://juju.is/docs
servers:
  - url: https://localhost:17777/api/v1
tags:
  - name: application
    description: Manage Juju applications
    externalDocs:
      description: Find out more about Juju applications.
      url: https://juju.is/docs/olm/manage-applications
  - name: cloud
    description: Manage Juju clouds
    externalDocs:
      description: Find out more about Juju clouds.
      url: https://juju.is/docs/olm/manage-clouds
  - name: model
    description: Manage Juju models
    externalDocs:
      description: Find out more about Juju models.
      url: https://juju.is/docs/olm/manage-models
  - name: subnet
    description: Manage Juju subnets
    externalDocs:
      description: Find out more about Juju subnets.
      url: https://juju.is/docs/olm/manage-subnets
  - name: user
    description: Manage Juju users
    externalDocs:
      description: Find out more about Juju users.
      url: https://juju.is/docs/olm/manage-users
paths:
  /cloud/{cloud}:
    get:
      tags:
        - cloud
      summary: Get a specific cloud.
      description: Returns detailed information about a given cloud.
      operationId: getCloud
      parameters:
        - $ref: "#/components/parameters/Cloud"
      responses:
        "200":
          description: Detailed information about the requested cloud.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - cloud
      summary: Delete a cloud.
      description: |
        Delete a cloud from the controller. If the cloud is in use (has any model deployed),
        the removal will fail.
      operationId: deleteCloud
      parameters:
        - $ref: "#/components/parameters/Cloud"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /cloud/{cloud}/access:
    get:
      tags:
        - cloud
      summary: List of user permissions for cloud.
      description: |
        Return a list of objects that describe the level of permissions granted over the cloud
        to users on the controller.
      operationId: getCloudUserAccess
      parameters:
        - $ref: "#/components/parameters/Cloud"
      responses:
        "200":
          description: List of cloud access controls
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudUserAccessList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - cloud
      summary: Change the cloud access granted to users.
      description: Update the level of cloud access that is granted to specific users.
      operationId: updateCloudUserAccess
      parameters:
        - $ref: "#/components/parameters/Cloud"
      requestBody:
        description: An object describing the changes to cloud access controls.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudUserAccessUpdateList"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /clouds:
    get:
      tags:
        - cloud
      summary: Get clouds that specified user has access to.
      description: |
        Returns clouds that the specified user has access to. Controller admins (superuser) can
        list clouds for any user. Other users can only ask about their own clouds.
      operationId: listClouds
      parameters:
        - $ref: "#/components/parameters/Detailed"
        - $ref: "#/components/parameters/All"
        - $ref: "#/components/parameters/UserQuery"
      responses:
        "200":
          description: List of supported clouds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - cloud
      summary: Adds a new cloud.
      description: Adds a new cloud, different from the one managed by the controller.
      operationId: addCloud
      parameters:
        - $ref: "#/components/parameters/Force"
      requestBody:
        description: Cloud creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudDetail"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /clouds/supported:
    get:
      tags:
        - cloud
      summary: Get supported clouds.
      description: |
        Returns the definitions of all clouds supported by the controller that the logged in
        user can see.
      operationId: listSupportedClouds
      responses:
        "200":
          description: List of supported clouds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudList"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /deploy:
    post:
      tags:
        - application
      description: |
        Deploy an application.

        Returns a simple response with a location header pointing to the deployed
        application.

        If the deployment relies upon local resources being uploaded, clients should
        retrieve the URL in the location header send in the response in order to
        learn the URL resources should be POSTed too after deploy (see `uploadResource`
        operation).
      operationId: deploy
      parameters:
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
        - $ref: "#/components/parameters/Trust"
        - $ref: "#/components/parameters/Scale"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /integrate:
    post:
      tags:
        - application
      summary: Integrates two applications.
      description: Integrates applications using specified endpoints and returns the relation info.
      operationId: integrate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrateArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}:
    get:
      tags:
        - model
      summary: Get a specific model.
      description: Returns detailed information about a given model.
      operationId: getModel
      parameters:
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: Detailed information about the requested model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - model
      summary: Delete a model.
      description: Delete a model from the controller.
      operationId: deleteModel
      parameters:
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/DestroyStorage"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MaxWait"
        - $ref: "#/components/parameters/Timeout"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}/access:
    get:
      tags:
        - model
      summary: List of user permissions for model.
      description: |
        Return a list of objects that describe the level of permissions granted over the model
        to users on the controller.
      operationId: getModelUserAccess
      parameters:
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: List of model access controls.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelUserAccessList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - model
      summary: Change the model access granted to users.
      description: |
        Update the level of model access that is granted to specific users.
      operationId: updateModelUserAccess
      parameters:
        - $ref: "#/components/parameters/Model"
      requestBody:
        description: An object describing the changes to model access controls.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelUserAccessUpdateList"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}/application/{application}/refresh:
    patch:
      tags:
        - application
      description: Resets the charm for a given for the application.
      operationId: refreshApplication
      parameters:
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationSubstitute"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}/application/{application}/resources/{resource}:
    post:
      tags:
        - application
      description: Uploads a resource for an application.
      operationId: uploadResource
      parameters:
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/Resource"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/DryRun"
      requestBody:
        content:
          application/octet-stream: {}
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}/credential:
    patch:
      tags:
        - model
      summary: Change the credential related to the model.
      description: Update the underlying cloud credential that's associated with the model.
      operationId: updateModelCredential
      parameters:
        - $ref: "#/components/parameters/Model"
      requestBody:
        description: An object containing the identifier of the new cloud credential.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelCredential"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model/{model}/status:
    get:
      tags:
        - model
      summary: Get the status of a specific model.
      description: |
        Returns status information about a model, such as applications deployed and machines.
      operationId: getModelStatus
      parameters:
        - $ref: "#/components/parameters/Model"
      responses:
        "200":
          description: Status information about the requested model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models:
    get:
      tags:
        - model
      summary: List models
      description: |
        Returns the models that the specified user has access to in the current server.

        Controller admins (superuser) can list models for any user.

        Other users can only ask about their own models.
      operationId: listModels
      parameters:
        - $ref: "#/components/parameters/All"
        - $ref: "#/components/parameters/Detailed"
        - $ref: "#/components/parameters/UserQuery"
      responses:
        "200":
          description: List of models the specified user has access to.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - model
      summary: Create a new model
      description: Creates a new model using the account and model config specified in the args.
      operationId: createModel
      requestBody:
        description: Model creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelCreateArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /models/defaults:
    get:
      tags:
        - model
      summary: List model defaults.
      description: Returns the model defaults for the specified clouds.
      operationId: listModelDefaults
      parameters:
        - name: clouds
          in: query
          description: The clouds for which to fetch the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: List of model defaults for the specified clouds.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelDefaultsList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - model
      summary: Update model defaults.
      description: |
        Set or unset model defaults for the specified cloud.

        Model default configuration settings are specific to the cloud on which the model is
        deployed. If the controller hosts more than one cloud, the cloud (and optionally region)
        must be specified.
      operationId: updateModelDefaults
      parameters:
        - name: cloud
          in: query
          description: The cloud for which to update the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: cloud-region
          in: query
          description: The cloud region for which to update the model defaults.
          required: false
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: An object describing those model defaults to set or unset.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelDefaultsUpdate"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /model{model}/application/{application}:
    get:
      tags:
        - application
      description: Returns application information.
      operationId: getApplication
      parameters:
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
      responses:
        "200":
          description: Detailed information about the requested application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - application
      description: Removes a given application.
      operationId: deleteApplication
      parameters:
        - $ref: "#/components/parameters/Model"
        - $ref: "#/components/parameters/Application"
        - $ref: "#/components/parameters/DestroyStorage"
        - $ref: "#/components/parameters/Force"
        - $ref: "#/components/parameters/MaxWait"
        - $ref: "#/components/parameters/DryRun"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /subnets:
    get:
      tags:
        - subnet
      summary: Get subnets.
      description: |
        Returns all subnets that match the specified filters.
      operationId: listSubnets
      parameters:
        - $ref: "#/components/parameters/CIDRs"
        - $ref: "#/components/parameters/Space"
        - $ref: "#/components/parameters/AvailabilityZone"
      responses:
        "200":
          description: List of subnets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubnetList"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  # TODO: Should this really just be GET /clouds, where clouds each return their zones?
  /subnets/zones:
    get:
      tags:
        - subnet
      summary: Get all known availability zones.
      description: |
        Returns all known availability zones across all known clouds.
      operationId: listAvailabilityZones
      responses:
        "200":
          description: List of availability zones.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityZoneList"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /user/{user}:
    get:
      tags:
        - user
      summary: Returns information about a specific user.
      description: |
        Returns information about a specific user.
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          description: Detailed information about the requested user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - user
      summary: Updates a user.
      description: |
        Updates a given user including display-name, enabled/disabled state and password.
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/User"
      requestBody:
        description: User creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - user
      summary: Delete a user.
      description: |
        Permanently removes a user from the current controller. While the user is permanently
        removed we keep it's information around for auditing purposes.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/User"
      responses:
        "200":
          $ref: "#/components/responses/EmptySyncResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users:
    post:
      tags:
        - user
      summary: Adds a new user.
      description: Adds a new user to the controller.
      operationId: addUser
      requestBody:
        description: User creation parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserArgs"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/EntityCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Application:
      type: object
      description: Information about a given application.
      properties:
        charm:
          type: string
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        revision:
          type: integer
        constraints:
          $ref: "#/components/schemas/Constraints"
        endpoint-bindings:
          type: object
          additionalProperties:
            type: string
        exposed:
          type: boolean
        exposed-endpoints:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ExposedEndpoint"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        principal:
          type: boolean
      additionalProperties: false
      required:
        - charm
        - principal
        - exposed
    ApplicationSubstitute:
      type: object
      properties:
        application:
          type: string
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        charm-name:
          type: string
        config-settings:
          type: object
          additionalProperties:
            type: string
        config-settings-yaml:
          type: string
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        storage-constraints:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/StorageConstraints"
      additionalProperties: false
      required:
        - application
        - charm-name
    Architecture:
      type: string
      enum:
        - amd64
        - arm64
        - i386
        - riscv64
    AvailabilityZone:
      type: object
      properties:
        available:
          type: boolean
        error:
          $ref: "#/components/schemas/Error"
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - available
    AvailabilityZoneList:
      type: object
      properties:
        availability-zones:
          description: List of availability zones.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/AvailabilityZone"
      additionalProperties: false
      required:
        - availability-zones
    Base:
      type: object
      properties:
        channel:
          type: string
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - channel
    CharmChannel:
      type: object
      properties:
        track:
          type: string
        risk:
          type: string
          enum:
            - stable
            - candidate
            - beta
            - edge
        branch:
          type: string
    CharmOrigin:
      type: object
      properties:
        architecture:
          $ref: "#/components/schemas/Architecture"
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        hash:
          description: The hash of the charm in CharmHub located by this origin.
          type: string
        id:
          type: string
        instance-key:
          description: |
            A unique string associated with the application.

            Create with the charmhub.CreateInstanceKey method.
          type: string
        revision:
          type: integer
        source:
          type: string
          enum:
            - local
            - charm-hub
        type:
          type: string
          enum:
            - charm
            - bundle
      additionalProperties: false
      required:
        - source
        - type
        - id
    Cloud:
      type: object
      properties:
        auth-types:
          type: array
          items:
            type: string
            enum:
              - access-key
              - instance-role
              - userpass
              - oauth1
              - oauth2
              - jsonfile
              - clientcertificate
              - httpsig
              - interactive
              - empty
              - auth-types
              - endpoint
              - regions
              - certfilename
        name:
          type: string
        regions:
          type: array
          items:
            $ref: "#/components/schemas/CloudRegion"
        type:
          type: string
          enum:
            - aws
            - azure
            - equinix
            - gce
            - lxd
            - k8s
            - oci
        users:
          type: array
          items:
            $ref: "#/components/schemas/CloudUser"
      additionalProperties: false
      required:
        - type
    CloudDetail:
      type: object
      allOf:
        - $ref: "#/components/schemas/Cloud"
        - type: object
          properties:
            # TODO: We should probably be modelling CA's properly in this spec?
            ca-certificates:
              type: array
              items:
                type: string
            default-cloud-region:
              type: string
            skip-tls-verify:
              type: boolean
          additionalProperties: false
    CloudList:
      type: object
      properties:
        clouds:
          description: List of supported clouds.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Cloud"
              - $ref: "#/components/schemas/CloudDetail"
      additionalProperties: false
      required:
        - clouds
    CloudRegion:
      type: object
      properties:
        endpoint:
          type: string
        identity-endpoint:
          type: string
        name:
          type: string
        storage-endpoint:
          type: string
        config:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - name
    CloudUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/CloudUserAccess"
        - type: object
          properties:
            display-name:
              type: string
          additionalProperties: false
          required:
            - display-name
    CloudUserAccess:
      type: object
      properties:
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - add-model
            - admin
        user:
          description: Identifier of the user to whom permissions apply.
          type: string
      additionalProperties: false
      required:
        - access
        - user
    CloudUserAccessList:
      type: object
      properties:
        permissions:
          description: List of granted permissions to the cloud.
          type: array
          items:
            $ref: "#/components/schemas/CloudUserAccess"
      additionalProperties: false
      required:
        - permissions
    CloudUserAccessUpdate:
      type: object
      allOf:
        - $ref: "#/components/schemas/CloudUserAccess"
        - type: object
          properties:
            action:
              description: Whether to 'grant' or 'revoke' the given permission for the specified user.
              type: string
              enum:
                - grant
                - revoke
          required:
            - action
      additionalProperties: false
    CloudUserAccessUpdateList:
      type: object
      properties:
        permissions:
          description: List of cloud access updates.
          type: array
          items:
            $ref: "#/components/schemas/CloudUserAccessUpdate"
      additionalProperties: false
      required:
        - permissions
    Constraints:
      description: |
        Describes a user's requirements of the hardware on which units of an application will run.

        Constraints are used to choose an existing machine onto which a unit will be deployed,
        or to provision a new machine if no existing one satisfies the requirements.
      type: object
      properties:
        allocate-public-ip:
          type: boolean
        architecture:
          description: Indicates that a machine must run the named architecture.
          $ref: "#/components/schemas/Architecture"
        container:
          description: Indicates that a machine must be the specified container type.
          $ref: "#/components/schemas/ContainerType"
        cores:
          description: Indicates that a machine must have at least that number of effective cores available.
          type: integer
        cpu-power:
          description: |
            Indicates that a machine must have at least that amount of CPU power available,
            where 100 CpuPower is considered to be equivalent to 1 Amazon ECU (or, roughly, a single 2007-era Xeon).
          type: integer
        image-id:
          description: |
            Indicates that a machine must use the specified image.

            This is provider specific, and for the moment is only implemented on MAAS clouds.
          type: string
        instance-role:
          description: |
            Indicates that the specified role/profile for the given cloud should be used.

            Only valid for clouds which support instance roles. Currently only for AWS with instance-profiles.
          type: string
        instance-type:
          description: |
            Indicates that the specified cloud instance type be used.

            Only valid for clouds which support instance types.
          type: string
        mem:
          description: Indicates that a machine must have at least that many megabytes of RAM.
          type: integer
        root-disk:
          description: Indicates that a machine must have at least that many megabytes of disk space available in the root disk.
          type: integer
        root-disk-source:
          description: |
            Determines what storage the root disk should be allocated from.

            This will be provider specific - in the case of vSphere it identifies the datastore the root disk file should be created in.
          type: string
        spaces:
          description: |
            Holds a list of juju network spaces that should be available (or not) on the machine.

            Positive and negative values are accepted, and the difference is the latter have a "^" prefix to the name.
          type: array
          items:
            type: string
        tags:
          description: Indicates tags that the machine must have applied to it.
          type: array
          items:
            type: string
        virt-type:
          description: |
            Indicates that a machine must run the named virtual type.

            Only valid for clouds with multi-hypervisor support.
          type: string
        zones:
          description: Holds a list of availability zones limiting where the machine can be located.
          type: array
          items:
            type: string
      additionalProperties: false
    ContainerType:
      type: string
      enum:
        - none
        - lxd
        - kvm
    DeployArgs:
      type: object
      properties:
        model:
          type: string
        application-name:
          type: string
        attach-storage:
          type: array
          items:
            type: string
        charm-name:
          type: string
        config-yaml:
          type: string
        constraints:
          $ref: "#/components/schemas/Constraints"
        devices:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Constraints"
        placement:
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        storage:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Constraints"
        base:
          $ref: "#/components/schemas/Base"
        channel:
          $ref: "#/components/schemas/CharmChannel"
        endpoint-bindings:
          type: object
          additionalProperties:
            type: string
        resources:
          type: object
          additionalProperties:
            type: string
        revision:
          type: integer
      additionalProperties: false
      required:
        - charm-name
        - model
    Error:
      type: object
      properties:
        error:
          type: string
          examples:
            - Bad request.
        error-code:
          type: integer
          examples:
            - 400
        type:
          type: string
          examples:
            - error
      additionalProperties: false
      required:
        - error
        - error-code
        - type
    ExposedEndpoint:
      type: object
      properties:
        expose-to-cidrs:
          type: array
          items:
            type: string
        expose-to-spaces:
          type: array
          items:
            type: string
      additionalProperties: false
    IntegrateArgs:
      type: object
      properties:
        provider:
          $ref: "#/components/schemas/Integrator"
        requirer:
          $ref: "#/components/schemas/Integrator"
      additionalProperties: false
      required:
        - provider
        - requirer
    Integrator:
      description: An entity describing one end of an integration.
      type: object
      properties:
        model:
          type: string
        application:
          type: string
        endpoint:
          type: string
      required:
        - model
        - application
    MachineHardware:
      type: object
      properties:
        architecture:
          $ref: "#/components/schemas/Architecture"
        availability-zone:
          type: string
        cores:
          type: integer
        cpu-power:
          type: integer
        mem:
          type: integer
        root-disk:
          type: integer
        tags:
          type: array
          items:
            type: string
        virt-type:
          type: string
      additionalProperties: false
    Model:
      description: Information about a given model.
      type: object
      properties:
        name:
          type: string
        owner:
          description: Identifier of the model's owner.
          type: string
        # TODO: Should this be an enum?
        type:
          type: string
        uuid:
          type: string
        agent-version:
          $ref: "#/components/schemas/Version"
        cloud-credential:
          description: Identifier for the model's cloud credential.
          type: string
        cloud-region:
          type: string
        cloud:
          description: Identifier for the model's cloud.
          type: string
        controller-uuid:
          type: string
        counts:
          type: array
          items:
            $ref: "#/components/schemas/ModelEntityCount"
        default-series:
          type: string
        is-controller:
          type: boolean
        life:
          type: string
        migration:
          $ref: "#/components/schemas/ModelMigrationStatus"
        # TODO: Should this be an enum?
        provider-type:
          type: string
        sla:
          $ref: "#/components/schemas/ModelSLAInfo"
        users:
          type: array
          items:
            $ref: "#/components/schemas/ModelUser"
      additionalProperties: false
      required:
        - name
        - owner
        - type
        - uuid
        - controller-uuid
        - is-controller
        - cloud
        - life
        - counts
        - sla
        - agent-version
    ModelApplicationInfo:
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
      required:
        - name
    ModelCreateArgs:
      type: object
      properties:
        cloud:
          description: Identifier of the cloud on which to create the model.
          type: string
        config:
          description: The configuration of the new model.
          type: object
          additionalProperties: true
        credential:
          description: The credential to use when creating the new model.
          type: string
        name:
          description: The name of the new model.
          type: string
        owner:
          description: Identifier of the owner of the new model.
          type: string
        region:
          description: Identifier of the cloud region in which to create the model.
          type: string
      additionalProperties: false
      required:
        - name
        - owner
    ModelCredential:
      type: object
      properties:
        cloud-credential:
          description: Identifier of the cloud credential.
          type: string
      additionalProperties: false
      required:
        - cloud-credential
    ModelDefaults:
      description: Model defaults for a given cloud.
      type: object
      properties:
        controller:
          type: object
          additionalProperties: true
        default:
          type: object
          additionalProperties: true
        regions:
          type: array
          items:
            $ref: "#/components/schemas/RegionDefaults"
      additionalProperties: false
    ModelDefaultsList:
      description: A list of model defaults for the specified clouds
      type: object
      properties:
        model-defaults:
          type: array
          items:
            $ref: "#/components/schemas/ModelDefaults"
      additionalProperties: false
      required:
        - model-defaults
    ModelDefaultsUpdate:
      type: object
      description: |
        An object representing the model defaults to update. Keys represent the model defaults to
        set, and values represent the desired values. The 'unset' a model default, its value
        should be set to `null`.
      additionalProperties: false
    ModelDetail:
      description: Detailed administrative information about a model
      allOf:
        - $ref: "#/components/schemas/Model"
        - type: object
          properties:
            cloud-credential-validity:
              type: boolean
            default-base:
              type: string
            machines:
              type: array
              items:
                $ref: "#/components/schemas/ModelMachine"
            secret-backends:
              type: array
              items:
                $ref: "#/components/schemas/SecretBackend"
            supported-features:
              type: array
              items:
                $ref: "#/components/schemas/SupportedFeature"
          additionalProperties: false
          required:
            - machines
            - secret-backends
    ModelEntityCount:
      type: object
      properties:
        count:
          type: integer
        entity:
          type: string
      additionalProperties: false
      required:
        - entity
        - count
    ModelFilesystemInfo:
      description: Represents a filesystem within the model.
      allOf:
        - $ref: "#/components/schemas/ModelStorageAttributes"
    ModelList:
      type: object
      properties:
        models:
          description: List of models.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Model"
              - $ref: "#/components/schemas/ModelDetail"
      additionalProperties: false
      required:
        - models
    ModelMachine:
      type: object
      properties:
        display-name:
          type: string
        ha-primary:
          type: boolean
        hardware:
          $ref: "#/components/schemas/MachineHardware"
        has-vote:
          type: boolean
        id:
          type: string
        instance-id:
          type: string
        message:
          type: string
        status:
          type: string
        wants-vote:
          type: boolean
      additionalProperties: false
      required:
        - id
    ModelMigrationStatus:
      description: Status information about a model migration, including start and finish time.
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        status:
          type: string
      additionalProperties: false
      required:
        - status
        - start
    ModelSLAInfo:
      type: object
      properties:
        level:
          type: string
        owner:
          type: string
      additionalProperties: false
      required:
        - level
        - owner
    ModelStatus:
      type: object
      properties:
        application-count:
          type: integer
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ModelApplicationInfo"
        error:
          $ref: "#/components/schemas/Error"
        filesystems:
          type: array
          items:
            $ref: "#/components/schemas/ModelFilesystemInfo"
        hosted-machine-count:
          type: integer
        life:
          type: string
        machines:
          type: array
          items:
            $ref: "#/components/schemas/ModelMachine"
        model:
          description: Identifier of the model.
          type: string
        owner:
          description: Identifier of the model's owner.
          type: string
        type:
          type: string
        unit-count:
          type: integer
        volumes:
          type: array
          items:
            $ref: "#/components/schemas/ModelVolumeInfo"
      additionalProperties: false
      required:
        - model
        - life
        - type
        - hosted-machine-count
        - application-count
        - unit-count
        - owner
    ModelStorageAttributes:
      type: object
      properties:
        detachable:
          type: boolean
        id:
          type: string
        message:
          type: string
        provider-id:
          type: string
        status:
          type: string
      additionalProperties: false
      required:
        - id
    ModelUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/ModelUserAccess"
        - type: object
          properties:
            display-name:
              type: string
          additionalProperties: false
          required:
            - display-name
    ModelUserAccess:
      type: object
      properties:
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - read
            - write
            - admin
        user:
          description: Identifier of the user to whom permissions apply.
          type: string
      additionalProperties: false
      required:
        - access
        - user
    ModelUserAccessList:
      type: object
      properties:
        permissions:
          description: List of granted permissions to the model.
          type: array
          items:
            $ref: "#/components/schemas/ModelUserAccess"
      additionalProperties: false
      required:
        - permissions
    ModelUserAccessUpdate:
      type: object
      allOf:
        - $ref: "#/components/schemas/ModelUserAccess"
        - type: object
          properties:
            action:
              description: Whether to 'grant' or 'revoke' the given permission for the specified user.
              type: string
              enum:
                - grant
                - revoke
          required:
            - action
      additionalProperties: false
    ModelUserAccessUpdateList:
      type: object
      properties:
        permissions:
          description: List of model access updates.
          type: array
          items:
            $ref: "#/components/schemas/ModelUserAccessUpdate"
      additionalProperties: false
      required:
        - permissions
    ModelVolumeInfo:
      description: Represents a volume within the model
      allOf:
        - $ref: "#/components/schemas/ModelStorageAttributes"
    Placement:
      description: Defines a placement directive, which has a scope and a value that is scope-specific.
      type: object
      properties:
        directive:
          description: Scope-specific placement directive.
          type: string
        scope:
          description: Can be a container type or a machine scope (#).
          oneOf:
            - $ref: "#/components/schemas/ContainerType"
            - const: "#"
      additionalProperties: false
      required:
        - scope
        - directive
    RegionDefaults:
      type: object
      properties:
        region-name:
          type: string
        value:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - region-name
        - value
    Resource:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        type:
          type: string
          enum:
            - file
            - oci-image
        descriptor:
          description: Path or image url set when resource is created.
          type: string
    SecretBackend:
      type: object
      properties:
        backend-type:
          type: string
        config:
          type: object
          additionalProperties: true
        name:
          type: string
        token-rotate-interval:
          type: integer
      additionalProperties: false
      required:
        - name
        - backend-type
        - config
    StorageConstraints:
      type: object
      properties:
        count:
          type: integer
        pool:
          type: string
        size:
          type: integer
      additionalProperties: false
    Subnet:
      type: object
      properties:
        cidr:
          description: CIDR of the subnet in IPv4 or IPv6 notation.
          type: string
        id:
          description: Unique identifier for the subnet.
          type: string
        provider-id:
          description: Provider-specific subnet ID (if applicable).
          type: string
        provider-network-id:
          description: ID of the network containing this subnet from the provider's perspective.
          type: string
        provider-space-id:
          description: ID of the space containing this subnet from the provider's perspective.
          type: string
        space:
          description: The Juju network space this subnet is associated with.
          type: string
        status:
          description: Describes the lifecycle stage of the subnet.
          type: string
          enum:
            - alive
            - dying
            - dead
        vlan-tag:
          description: Between 1 and 4094 for VLANs; 0 for normal networks. IEEE 802.1Q standard.
          type: integer
          minimum: 0
          maximum: 4094
        zones:
          description: One or more Availability Zones this subnet is associated with.
          type: array
          items:
            $ref: "#/components/schemas/AvailabilityZone"
      additionalProperties: false
      required:
        - cidr
        - id
        - space
        - status
        - vlan-tag
        - zones
    SubnetList:
      type: object
      properties:
        subnets:
          description: List of subnets.
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Subnet"
      additionalProperties: false
      required:
        - subnets
    Success:
      type: object
      properties:
        status:
          type: string
          examples:
            - Success.
        status_code:
          type: integer
          examples:
            - 200
        type:
          type: string
          examples:
            - sync
      additionalProperties: false
    SupportedFeature:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - name
        - description
    User:
      type: object
      properties:
        display-name:
          type: string
        username:
          type: string
        enabled:
          type: boolean
          default: true
        access:
          description: Level of access granted to the specified user.
          type: string
          enum:
            - login
            - superuser
        created-by:
          type: string
          description: Identifier of user that created this user.
        created-at:
          type: string
          format: date-time
        last-connection:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - display-name
        - username
        - enabled
        - access
    UserArgs:
      type: object
      properties:
        display-name:
          type: string
        username:
          type: string
        enabled:
          type: boolean
          default: true
        password:
          type: string
      additionalProperties: false
      required:
        - display-name
        - username
        - password
    Version:
      type: object
      properties:
        build:
          type: integer
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        tag:
          type: string
      additionalProperties: false
      required:
        - major
        - minor
        - tag
        - patch
        - build
  parameters:
    All:
      in: query
      name: all
      description: List all instances of entity, irrespective of user.
      required: false
      schema:
        type: string
        default: "false"
        enum:
          - "true"
          - "false"
    Application:
      in: path
      name: application
      required: true
      description: The name of a deployed application.
      schema:
        type: string
    AvailabilityZone:
      in: query
      name: az
      required: false
      description: The name of an Availability Zone.
      schema:
        type: string
    CIDRs:
      in: query
      name: cidrs
      required: false
      description: List of CIDRs used to filter subnets.
      schema:
        type: array
        items:
          type: string
    Cloud:
      in: path
      name: cloud
      required: true
      description: The name of a cloud in the controller.
      schema:
        type: string
    DestroyStorage:
      in: query
      name: destroy-storage
      required: false
      schema:
        type: boolean
    Detailed:
      in: query
      name: detailed
      description: Return detailed information about requested entity.
      required: false
      schema:
        type: boolean
        default: false
    DryRun:
      in: query
      name: dry-run
      required: false
      schema:
        type: boolean
        default: false
    Force:
      in: query
      name: force
      required: false
      schema:
        type: boolean
        default: false
    MaxWait:
      in: query
      name: max-wait
      required: false
      schema:
        type: integer
    Model:
      in: path
      name: model
      required: true
      description: The name of a model in the controller.
      schema:
        type: string
    Resource:
      in: path
      name: resource
      required: true
      description: The name of a resource for an application.
      schema:
        type: string
    Scale:
      in: query
      name: num-units
      required: false
      schema:
        type: integer
    Space:
      in: query
      name: space
      required: false
      description: The name of a Juju Space.
      schema:
        type: string
    Timeout:
      in: query
      name: timeout
      required: false
      schema:
        type: integer
    Trust:
      in: query
      name: trust
      required: false
      schema:
        type: boolean
        default: false
    User:
      in: path
      name: user
      required: true
      description: Username of a user on the controller.
      schema:
        type: string
    UserQuery:
      in: query
      name: user
      required: true
      description: Username of a user on the controller.
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    EmptySyncResponse:
      description: Empty sync response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    EntityCreated:
      description: Entity created response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
      headers:
        Location:
          schema:
            type: string
            format: uri
          description: The location of the newly created entity.
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
# Use this section to define reusable objects
# callbacks: {}
# examples: {}
# headers: {}
# links: {}
# pathItems: {}
# requestBodies: {}
# responses: {}
# securitySchemes: {}
