openapi: 3.1.0
info:
  title: Juju Client Facade/OpenAPI Generation
  summary: Naive conversion from Juju's schema.json to an OpenAPI spec.
  description: Naive conversion from Juju's schema.json to an OpenAPI spec.
  version: "1.0"
paths:
  /action/actions:
    get:
      tags:
        - action
      description: Takes a list of ActionTags, and returns the full Action for each
        ID.
      operationId: actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResults"
  /action/applicationsCharmsActions:
    get:
      tags:
        - action
      description: Returns a slice of charm Actions for a slice of services.
      operationId: applicationsCharmsActions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationsCharmActionsResults"
  /action/cancel:
    get:
      tags:
        - action
      description: Attempts to cancel enqueued Actions from running.
      operationId: cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionResults"
  /action/enqueueOperation:
    get:
      tags:
        - action
      description: Takes a list of Actions and queues them up to be executed as an
        operation, each action running as a task on the designated ActionReceiver.
        We return the ID of the overall operation and each individual task.
      operationId: enqueueOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Actions"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnqueuedActions"
  /action/listOperations:
    get:
      tags:
        - action
      description: Fetches the called actions for specified apps/units.
      operationId: listOperations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OperationQueryArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResults"
  /action/operations:
    get:
      tags:
        - action
      description: Fetches the specified operation ids.
      operationId: operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResults"
  /action/run:
    get:
      tags:
        - action
      description: The commands specified on the machines identified through the list
        of machines, units and services.
      operationId: run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnqueuedActions"
  /action/runOnAllMachines:
    get:
      tags:
        - action
      description: Attempts to run the specified command on all the machines.
      operationId: runOnAllMachines
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnqueuedActions"
  /action/watchActionsProgress:
    get:
      tags:
        - action
      description: Creates a watcher that reports on action log messages.
      operationId: watchActionsProgress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringsWatchResults"
  /admin/login:
    get:
      tags:
        - admin
      description: Logs in with the provided credentials.  All subsequent requests
        on the connection will act as the authenticated user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
  /admin/redirectInfo:
    get:
      tags:
        - admin
      description: Returns redirected host information for the model. In Juju it always
        returns an error because the Juju controller does not multiplex controllers.
      operationId: redirectInfo
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedirectInfoResult"
  /allmodelwatcher/next:
    get:
      tags:
        - allmodelwatcher
      description: Will return the current state of everything on the first call and
        subsequent calls will
      operationId: next
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllWatcherNextResults"
  /allmodelwatcher/stop:
    get:
      tags:
        - allmodelwatcher
      description: Stops the watcher.
      operationId: stop
  /allwatcher/next:
    get:
      tags:
        - allwatcher
      description: Will return the current state of everything on the first call and
        subsequent calls will
      operationId: next
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllWatcherNextResults"
  /allwatcher/stop:
    get:
      tags:
        - allwatcher
      description: Stops the watcher.
      operationId: stop
  /annotations/get:
    get:
      tags:
        - annotations
      description: Returns annotations for given entities. If annotations cannot be
        retrieved for a given entity, an error is returned. Each entity is treated
        independently and, hence, will fail or succeed independently.
      operationId: get
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationsGetResults"
  /annotations/set:
    get:
      tags:
        - annotations
      description: Stores annotations for given entities
      operationId: set
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationsSet"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/addRelation:
    get:
      tags:
        - application
      description: Adds a relation between the specified endpoints and returns the
        relation info.
      operationId: addRelation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRelation"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddRelationResults"
  /application/addUnits:
    get:
      tags:
        - application
      description: Adds a given number of units to an application.
      operationId: addUnits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddApplicationUnits"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddApplicationUnitsResults"
  /application/applicationsInfo:
    get:
      tags:
        - application
      description: Returns applications information.
      operationId: applicationsInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationInfoResults"
  /application/charmConfig:
    get:
      tags:
        - application
      description: Returns charm config for the input list of applications and model
        generations.
      operationId: charmConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationGetArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetConfigResults"
  /application/charmRelations:
    get:
      tags:
        - application
      description: Implements the server side of Application.CharmRelations.
      operationId: charmRelations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCharmRelations"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationCharmRelationsResults"
  /application/consume:
    get:
      tags:
        - application
      description: Adds remote applications to the model without creating any relations.
      operationId: consume
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsumeApplicationArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/deploy:
    get:
      tags:
        - application
      description: Fetches the charms from the charm store and deploys them using
        the specified placement directives.
      operationId: deploy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationsDeploy"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/deployFromRepository:
    get:
      tags:
        - application
      description: Is a one-stop deployment method for repository charms. Only a charm
        name is required to deploy. If argument validation fails, a list of all errors
        found in validation will be returned. If a local resource is provided, details
        required for uploading the validated resource will be returned.
      operationId: deployFromRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployFromRepositoryArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployFromRepositoryResults"
  /application/destroyApplication:
    get:
      tags:
        - application
      description: Removes a given set of applications.
      operationId: destroyApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyApplicationsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestroyApplicationResults"
  /application/destroyConsumedApplications:
    get:
      tags:
        - application
      description: Removes a given set of consumed (remote) applications.
      operationId: destroyConsumedApplications
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyConsumedApplicationsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/destroyRelation:
    get:
      tags:
        - application
      description: Removes the relation between the specified endpoints or an id.
      operationId: destroyRelation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyRelation"
        required: true
  /application/destroyUnit:
    get:
      tags:
        - application
      description: Removes a given set of application units.
      operationId: destroyUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyUnitsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestroyUnitResults"
  /application/expose:
    get:
      tags:
        - application
      description: Changes the juju-managed firewall to expose any ports that were
        also explicitly marked by units as open.
      operationId: expose
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationExpose"
        required: true
  /application/get:
    get:
      tags:
        - application
      description: Returns the charm configuration for an application.
      operationId: get
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationGet"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetResults"
  /application/getCharmURLOrigin:
    get:
      tags:
        - application
      description: Returns the charm URL and charm origin the given application is
        running at present.
      operationId: getCharmURLOrigin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationGet"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharmURLOriginResult"
  /application/getConfig:
    get:
      tags:
        - application
      description: Returns the charm config for each of the input applications.
      operationId: getConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetConfigResults"
  /application/getConstraints:
    get:
      tags:
        - application
      description: Returns the constraints for a given application.
      operationId: getConstraints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetConstraintsResults"
  /application/leader:
    get:
      tags:
        - application
      description: Returns the unit name of the leader for the given application.
      operationId: leader
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResult"
  /application/mergeBindings:
    get:
      tags:
        - application
      description: Merges operator-defined bindings with the current bindings for
        one or more applications.
      operationId: mergeBindings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationMergeBindingsArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/resolveUnitErrors:
    get:
      tags:
        - application
      description: Marks errors on the specified units as resolved.
      operationId: resolveUnitErrors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitsResolved"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/scaleApplications:
    get:
      tags:
        - application
      description: Scales the specified application to the requested number of units.
      operationId: scaleApplications
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScaleApplicationsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScaleApplicationResults"
  /application/setCharm:
    get:
      tags:
        - application
      description: Sets the charm for a given for the application.
      operationId: setCharm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationSetCharm"
        required: true
  /application/setConfigs:
    get:
      tags:
        - application
      description: Implements the server side of Application.SetConfig.  Both application
        and charm config are set. It does not unset values in Config map that are
        set to an empty string. Unset should be used for that.
      operationId: setConfigs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigSetArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/setConstraints:
    get:
      tags:
        - application
      description: Sets the constraints for a given application.
      operationId: setConstraints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetConstraints"
        required: true
  /application/setMetricCredentials:
    get:
      tags:
        - application
      description: Sets credentials on the application.
      operationId: setMetricCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationMetricCredentials"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/setRelationsSuspended:
    get:
      tags:
        - application
      description: Sets the suspended status of the specified relations.
      operationId: setRelationsSuspended
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationSuspendedArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/unexpose:
    get:
      tags:
        - application
      description: Changes the juju-managed firewall to unexpose any ports that were
        also explicitly marked by units as open.
      operationId: unexpose
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUnexpose"
        required: true
  /application/unitsInfo:
    get:
      tags:
        - application
      description: Returns unit information for the given entities (units or applications).
      operationId: unitsInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitInfoResults"
  /application/unsetApplicationsConfig:
    get:
      tags:
        - application
      description: Implements the server side of Application.UnsetApplicationsConfig.
      operationId: unsetApplicationsConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationConfigUnsetArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /application/updateApplicationBase:
    get:
      tags:
        - application
      description: Updates the application base. Base for subordinates is updated
        too.
      operationId: updateApplicationBase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /applicationoffers/applicationOffers:
    get:
      tags:
        - applicationoffers
      description: Gets details about remote applications that match given URLs.
      operationId: applicationOffers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferURLs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationOffersResults"
  /applicationoffers/destroyOffers:
    get:
      tags:
        - applicationoffers
      description: Removes the offers specified by the given URLs, forcing if necessary.
      operationId: destroyOffers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyApplicationOffers"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /applicationoffers/findApplicationOffers:
    get:
      tags:
        - applicationoffers
      description: Gets details about remote applications that match given filter.
      operationId: findApplicationOffers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryApplicationOffersResults"
  /applicationoffers/getConsumeDetails:
    get:
      tags:
        - applicationoffers
      description: Returns the details necessary to pass to another model to allow
        the specified args user to consume the offers represented by the args URLs.
      operationId: getConsumeDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsumeOfferDetailsArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumeOfferDetailsResults"
  /applicationoffers/listApplicationOffers:
    get:
      tags:
        - applicationoffers
      description: Gets deployed details about application offers that match given
        filter. The results contain details about the deployed applications such as
        connection count.
      operationId: listApplicationOffers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryApplicationOffersResults"
  /applicationoffers/modifyOfferAccess:
    get:
      tags:
        - applicationoffers
      description: Changes the application offer access granted to users.
      operationId: modifyOfferAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyOfferAccessRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /applicationoffers/offer:
    get:
      tags:
        - applicationoffers
      description: Makes application endpoints available for consumption at a specified
        URL.
      operationId: offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddApplicationOffers"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /applicationoffers/remoteApplicationInfo:
    get:
      tags:
        - applicationoffers
      description: Returns information about the requested remote application. This
        call currently has no client side API, only there for the Dashboard at this
        stage.
      operationId: remoteApplicationInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferURLs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteApplicationInfoResults"
  /backups/create:
    get:
      tags:
        - backups
      description: Is the API method that requests juju to create a new backup of
        its state.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupsCreateArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupsMetadataResult"
  /block/list:
    get:
      tags:
        - block
      description: Implements Block.List().
      operationId: list
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockResults"
  /block/switchBlockOff:
    get:
      tags:
        - block
      description: Implements Block.SwitchBlockOff().
      operationId: switchBlockOff
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockSwitchParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /block/switchBlockOn:
    get:
      tags:
        - block
      description: Implements Block.SwitchBlockOn().
      operationId: switchBlockOn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockSwitchParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /bundle/exportBundle:
    get:
      tags:
        - bundle
      description: Exports the current model configuration as bundle.
      operationId: exportBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportBundleParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResult"
  /bundle/getChanges:
    get:
      tags:
        - bundle
      description: Returns the list of changes required to deploy the given bundle
        data. The changes are sorted by requirements, so that they can be applied
        in order. GetChanges has been superseded in favour of GetChangesMapArgs. It's
        preferable to use that new method to add new functionality and move clients
        away from this one.
      operationId: getChanges
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BundleChangesParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleChangesResults"
  /bundle/getChangesMapArgs:
    get:
      tags:
        - bundle
      description: Returns the list of changes required to deploy the given bundle
        data. The changes are sorted by requirements, so that they can be applied
        in order. V4 GetChangesMapArgs is not supported on anything less than v4
      operationId: getChangesMapArgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BundleChangesParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleChangesMapArgsResults"
  /charms/addCharm:
    get:
      tags:
        - charms
      description: Adds the given charm URL (which must include revision) to the environment,
        if it does not exist yet. Local charms are not supported, only charm store
        and charm hub URLs. See also AddLocalCharm().
      operationId: addCharm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCharmWithOrigin"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharmOriginResult"
  /charms/charmInfo:
    get:
      tags:
        - charms
      description: Returns information about the requested charm.
      operationId: charmInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CharmURL"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Charm"
  /charms/checkCharmPlacement:
    get:
      tags:
        - charms
      description: Checks if a charm is allowed to be placed with in a given application.
      operationId: checkCharmPlacement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCharmPlacements"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /charms/getDownloadInfos:
    get:
      tags:
        - charms
      description: Attempts to get the bundle corresponding to the charm url and origin.
      operationId: getDownloadInfos
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CharmURLAndOrigins"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadInfoResults"
  /charms/isMetered:
    get:
      tags:
        - charms
      description: Returns whether or not the charm is metered.
      operationId: isMetered
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CharmURL"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsMeteredResult"
  /charms/list:
    get:
      tags:
        - charms
      description: Returns a list of charm URLs currently in the state. If supplied
        parameter contains any names, the result will be filtered to return only the
        charms with supplied names.
      operationId: list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CharmsList"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharmsListResult"
  /charms/listCharmResources:
    get:
      tags:
        - charms
      description: Returns a series of resources for a given charm.
      operationId: listCharmResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CharmURLAndOrigins"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharmResourcesResults"
  /charms/resolveCharms:
    get:
      tags:
        - charms
      description: Resolves the given charm URLs with an optionally specified preferred
        channel.  Channel provided via CharmOrigin.
      operationId: resolveCharms
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResolveCharmsWithChannel"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolveCharmWithChannelResults"
  /client/findTools:
    get:
      tags:
        - client
      description: Returns a List containing all tools matching the given parameters.
        TODO(juju 3.1) - remove, used by 2.9 client only
      operationId: findTools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindToolsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindToolsResult"
  /client/fullStatus:
    get:
      tags:
        - client
      description: Gives the information needed for juju status over the api
      operationId: fullStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullStatus"
  /client/statusHistory:
    get:
      tags:
        - client
      description: Returns a slice of past statuses for several entities.
      operationId: statusHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusHistoryRequests"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistoryResults"
  /client/watchAll:
    get:
      tags:
        - client
      description: Initiates a watcher for entities in the connected model.
      operationId: watchAll
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllWatcherId"
  /cloud/addCloud:
    get:
      tags:
        - cloud
      description: Adds a new cloud, different from the one managed by the controller.
      operationId: addCloud
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCloudArgs"
        required: true
  /cloud/addCredentials:
    get:
      tags:
        - cloud
      description: Adds new credentials. In contrast to UpdateCredentials() below,
        the new credentials can be for a cloud that the controller does not manage
        (this is required for CAAS models)
      operationId: addCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaggedCredentials"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /cloud/checkCredentialsModels:
    get:
      tags:
        - cloud
      description: Validates supplied cloud credentials' content against models that
        currently use these credentials. If there are any models that are using a
        credential and these models or their cloud instances are not going to be accessible
        with corresponding credential, there will be detailed validation errors per
        model. There's no Juju API client which uses this, but JAAS does,
      operationId: checkCredentialsModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaggedCredentials"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCredentialResults"
  /cloud/cloud:
    get:
      tags:
        - cloud
      description: Returns the cloud definitions for the specified clouds.
      operationId: cloud
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudResults"
  /cloud/cloudInfo:
    get:
      tags:
        - cloud
      description: Returns information about the specified clouds.
      operationId: cloudInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudInfoResults"
  /cloud/clouds:
    get:
      tags:
        - cloud
      description: Returns the definitions of all clouds supported by the controller
        that the logged in user can see.
      operationId: clouds
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudsResult"
  /cloud/credential:
    get:
      tags:
        - cloud
      description: Returns the specified cloud credential for each tag, minus secrets.
      operationId: credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudCredentialResults"
  /cloud/credentialContents:
    get:
      tags:
        - cloud
      description: Returns the specified cloud credentials, including the secrets
        if requested. If no specific credential name/cloud was passed in, all credentials
        for this user are returned. Only credential owner can see its contents as
        well as what models use it. Controller admin has no special superpowers here
        and is treated the same as all other users.
      operationId: credentialContents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudCredentialArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialContentResults"
  /cloud/instanceTypes:
    get:
      tags:
        - cloud
      description: Returns instance type information for the cloud and region in which
        the current model is deployed.
      operationId: instanceTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudInstanceTypesConstraints"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceTypesResults"
  /cloud/listCloudInfo:
    get:
      tags:
        - cloud
      description: Returns clouds that the specified user has access to. Controller
        admins (superuser) can list clouds for any user. Other users can only ask
        about their own clouds.
      operationId: listCloudInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCloudsRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCloudInfoResults"
  /cloud/modifyCloudAccess:
    get:
      tags:
        - cloud
      description: Changes the model access granted to users.
      operationId: modifyCloudAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyCloudAccessRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /cloud/removeClouds:
    get:
      tags:
        - cloud
      description: Removes the specified clouds from the controller. If a cloud is
        in use (has models deployed to it), the removal will fail.
      operationId: removeClouds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /cloud/revokeCredentialsCheckModels:
    get:
      tags:
        - cloud
      description: Revokes a set of cloud credentials. If the credentials are used
        by any of the models, the credential deletion will be aborted. If credential-in-use
        needs to be revoked nonetheless, this method allows the use of force.
      operationId: revokeCredentialsCheckModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeCredentialArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /cloud/updateCloud:
    get:
      tags:
        - cloud
      description: Updates an existing cloud that the controller knows about.
      operationId: updateCloud
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCloudArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /cloud/updateCredentialsCheckModels:
    get:
      tags:
        - cloud
      description: Updates a set of cloud credentials' content. If there are any models
        that are using a credential and these models are not going to be visible with
        updated credential content, there will be detailed validation errors per model.  Such
        model errors are returned separately and do not contribute to the overall
        method error status. Controller admins can 'force' an update of the credential
        regardless of whether it is deemed valid or not.
      operationId: updateCredentialsCheckModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCredentialArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCredentialResults"
  /cloud/userCredentials:
    get:
      tags:
        - cloud
      description: Returns the cloud credentials for a set of users.
      operationId: userCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserClouds"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringsResults"
  /controller/allModels:
    get:
      tags:
        - controller
      description: Allows controller administrators to get the list of all the models
        in the controller.
      operationId: allModels
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModelList"
  /controller/cloudSpec:
    get:
      tags:
        - controller
      description: Returns the model's cloud spec.
      operationId: cloudSpec
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudSpecResults"
  /controller/configSet:
    get:
      tags:
        - controller
      description: Changes the value of specified controller configuration settings.
        Only some settings can be changed after bootstrap. Settings that aren't specified
        in the params are left unchanged.
      operationId: configSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllerConfigSet"
        required: true
  /controller/controllerAPIInfoForModels:
    get:
      tags:
        - controller
      description: Returns the controller api connection details for the specified
        models.
      operationId: controllerAPIInfoForModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerAPIInfoResults"
  /controller/controllerConfig:
    get:
      tags:
        - controller
      description: Returns the controller's configuration.
      operationId: controllerConfig
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerConfigResult"
  /controller/controllerVersion:
    get:
      tags:
        - controller
      description: "Returns the version information associated with this controller
        binary.  NOTE: the implementation intentionally does not check for SuperuserAccess
        as the Version is known even to users with login access."
      operationId: controllerVersion
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllerVersionResults"
  /controller/dashboardConnectionInfo:
    get:
      tags:
        - controller
      description: Returns the connection information for a client to connect to the
        Juju Dashboard including any proxying information.
      operationId: dashboardConnectionInfo
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardConnectionInfo"
  /controller/destroyController:
    get:
      tags:
        - controller
      description: Destroys the controller.  If the args specify the destruction of
        the models, this method will attempt to do so. Otherwise, if the controller
        has any non-empty, non-Dead hosted models, then an error with the code params.CodeHasHostedModels
        will be transmitted.
      operationId: destroyController
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyControllerArgs"
        required: true
  /controller/getCloudSpec:
    get:
      tags:
        - controller
      description: Constructs the CloudSpec for a validated and authorized model.
      operationId: getCloudSpec
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelTag"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudSpecResult"
  /controller/getControllerAccess:
    get:
      tags:
        - controller
      description: Returns the level of access the specified users have on the controller.
      operationId: getControllerAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccessResults"
  /controller/hostedModelConfigs:
    get:
      tags:
        - controller
      description: Returns all the information that the client needs in order to connect
        directly with the host model's provider and destroy it directly.
      operationId: hostedModelConfigs
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostedModelConfigsResults"
  /controller/identityProviderURL:
    get:
      tags:
        - controller
      description: "Returns the URL of the configured external identity provider for
        this controller or an empty string if no external identity provider has been
        configured when the controller was bootstrapped.  NOTE: the implementation
        intentionally does not check for SuperuserAccess as the URL is known even
        to users with login access."
      operationId: identityProviderURL
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResult"
  /controller/initiateMigration:
    get:
      tags:
        - controller
      description: Attempts to begin the migration of one or more models to other
        controllers.
      operationId: initiateMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateMigrationArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateMigrationResults"
  /controller/listBlockedModels:
    get:
      tags:
        - controller
      description: Returns a list of all models on the controller which have a block
        in place.  The resulting slice is sorted by model name, then owner. Callers
        must be controller administrators to retrieve the list.
      operationId: listBlockedModels
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelBlockInfoList"
  /controller/modelConfig:
    get:
      tags:
        - controller
      description: Returns the model config for the controller model.  For information
        on the current model, use client.ModelGet
      operationId: modelConfig
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelConfigResults"
  /controller/modelStatus:
    get:
      tags:
        - controller
      description: Returns a summary of the model.
      operationId: modelStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelStatusResults"
  /controller/modifyControllerAccess:
    get:
      tags:
        - controller
      description: Changes the model access granted to users.
      operationId: modifyControllerAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyControllerAccessRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /controller/mongoVersion:
    get:
      tags:
        - controller
      description: Allows the introspection of the mongo version per controller
      operationId: mongoVersion
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResult"
  /controller/removeBlocks:
    get:
      tags:
        - controller
      description: Removes all the blocks in the controller.
      operationId: removeBlocks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveBlocksArgs"
        required: true
  /controller/watchAllModelSummaries:
    get:
      tags:
        - controller
      description: Starts watching the summary updates from the cache. This method
        is superuser access only, and watches all models in the controller.
      operationId: watchAllModelSummaries
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryWatcherID"
  /controller/watchAllModels:
    get:
      tags:
        - controller
      description: Starts watching events for all models in the controller. The returned
        AllWatcherId should be used with Next on the AllModelWatcher endpoint to receive
        deltas.
      operationId: watchAllModels
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllWatcherId"
  /controller/watchCloudSpecsChanges:
    get:
      tags:
        - controller
      description: Returns a watcher for cloud spec changes.
      operationId: watchCloudSpecsChanges
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotifyWatchResults"
  /controller/watchModelSummaries:
    get:
      tags:
        - controller
      description: Starts watching the summary updates from the cache. Only models
        that the user has access to are returned.
      operationId: watchModelSummaries
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryWatcherID"
  /credentialmanager/invalidateModelCredential:
    get:
      tags:
        - credentialmanager
      description: Marks the cloud credential for this model as invalid.
      operationId: invalidateModelCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvalidateCredentialArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /firewallrules/listFirewallRules:
    get:
      tags:
        - firewallrules
      description: Returns all the firewall rules.
      operationId: listFirewallRules
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFirewallRulesResults"
  /firewallrules/setFirewallRules:
    get:
      tags:
        - firewallrules
      description: Creates or updates the specified firewall rules.
      operationId: setFirewallRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirewallRuleArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /highavailability/enableHA:
    get:
      tags:
        - highavailability
      description: Adds controller machines as necessary to ensure the controller
        has the number of machines specified.
      operationId: enableHA
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ControllersSpecs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControllersChangeResults"
  /imagemetadatamanager/delete:
    get:
      tags:
        - imagemetadatamanager
      description: Deletes cloud image metadata for given image ids. It supports bulk
        calls.
      operationId: delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataImageIds"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /imagemetadatamanager/list:
    get:
      tags:
        - imagemetadatamanager
      description: Returns all found cloud image metadata that satisfy given filter.
        Returned list contains metadata ordered by priority.
      operationId: list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageMetadataFilter"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCloudImageMetadataResult"
  /imagemetadatamanager/save:
    get:
      tags:
        - imagemetadatamanager
      description: Stores given cloud image metadata. It supports bulk calls.
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataSaveParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /keymanager/addKeys:
    get:
      tags:
        - keymanager
      description: Adds new authorised ssh keys for the specified user.
      operationId: addKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyUserSSHKeys"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /keymanager/deleteKeys:
    get:
      tags:
        - keymanager
      description: Deletes the authorised ssh keys for the specified user.
      operationId: deleteKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyUserSSHKeys"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /keymanager/importKeys:
    get:
      tags:
        - keymanager
      description: Imports new authorised ssh keys from the specified key ids for
        the specified user.
      operationId: importKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyUserSSHKeys"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /keymanager/listKeys:
    get:
      tags:
        - keymanager
      description: Returns the authorised ssh keys for the specified users.
      operationId: listKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSSHKeys"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringsResults"
  /machinemanager/addMachines:
    get:
      tags:
        - machinemanager
      description: Adds new machines with the supplied parameters. The args will contain
        Base info.
      operationId: addMachines
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMachines"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMachinesResults"
  /machinemanager/destroyMachineWithParams:
    get:
      tags:
        - machinemanager
      description: Removes a set of machines from the model.
      operationId: destroyMachineWithParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyMachinesParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestroyMachineResults"
  /machinemanager/getUpgradeSeriesMessages:
    get:
      tags:
        - machinemanager
      description: Returns all new messages associated with upgrade series events.
        Messages that have already been retrieved once are not returned by this method.
      operationId: getUpgradeSeriesMessages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpgradeSeriesNotificationParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringsResults"
  /machinemanager/instanceTypes:
    get:
      tags:
        - machinemanager
      description: Returns instance type information for the cloud and region in which
        the current model is deployed.
      operationId: instanceTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelInstanceTypesConstraints"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceTypesResults"
  /machinemanager/provisioningScript:
    get:
      tags:
        - machinemanager
      description: Returns a shell script that, when run, provisions a machine agent
        on the machine executing the script.
      operationId: provisioningScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisioningScriptParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningScriptResult"
  /machinemanager/retryProvisioning:
    get:
      tags:
        - machinemanager
      description: Marks a provisioning error as transient on the machines.
      operationId: retryProvisioning
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetryProvisioningArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /machinemanager/upgradeSeriesComplete:
    get:
      tags:
        - machinemanager
      description: Marks a machine as having completed a managed series upgrade.
      operationId: upgradeSeriesComplete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /machinemanager/upgradeSeriesPrepare:
    get:
      tags:
        - machinemanager
      description: Prepares a machine for a OS series upgrade.
      operationId: upgradeSeriesPrepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /machinemanager/upgradeSeriesValidate:
    get:
      tags:
        - machinemanager
      description: Validates that the incoming arguments correspond to a valid series
        upgrade for the target machine. If they do, a list of the machine's current
        units is returned for use in soliciting user confirmation of the command.
      operationId: upgradeSeriesValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpgradeSeriesUnitsResults"
  /machinemanager/watchUpgradeSeriesNotifications:
    get:
      tags:
        - machinemanager
      description: Returns a watcher that fires on upgrade series events.
      operationId: watchUpgradeSeriesNotifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotifyWatchResults"
  /metricsdebug/getMetrics:
    get:
      tags:
        - metricsdebug
      description: Returns all metrics stored by the state server.
      operationId: getMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricResults"
  /metricsdebug/setMeterStatus:
    get:
      tags:
        - metricsdebug
      description: Sets meter statuses for entities.
      operationId: setMeterStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeterStatusParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelconfig/getModelConstraints:
    get:
      tags:
        - modelconfig
      description: Returns the constraints for the model.
      operationId: getModelConstraints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetConstraintsResults"
  /modelconfig/modelGet:
    get:
      tags:
        - modelconfig
      description: Implements the server-side part of the model-config CLI command.
      operationId: modelGet
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelConfigResults"
  /modelconfig/modelSet:
    get:
      tags:
        - modelconfig
      description: Implements the server-side part of the set-model-config CLI command.
      operationId: modelSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelSet"
        required: true
  /modelconfig/modelUnset:
    get:
      tags:
        - modelconfig
      description: Implements the server-side part of the set-model-config CLI command.
      operationId: modelUnset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelUnset"
        required: true
  /modelconfig/sLALevel:
    get:
      tags:
        - modelconfig
      description: Returns the current sla level for the model.
      operationId: sLALevel
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResult"
  /modelconfig/sequences:
    get:
      tags:
        - modelconfig
      description: Returns the model's sequence names and next values.
      operationId: sequences
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelSequencesResult"
  /modelconfig/setModelConstraints:
    get:
      tags:
        - modelconfig
      description: Sets the constraints for the model.
      operationId: setModelConstraints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetConstraints"
        required: true
  /modelconfig/setSLALevel:
    get:
      tags:
        - modelconfig
      description: Sets the sla level on the model.
      operationId: setSLALevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelSLA"
        required: true
  /modelgeneration/abortBranch:
    get:
      tags:
        - modelgeneration
      description: Aborts the input branch, marking it complete.  However no changes
        are made applicable to the whole model.  No units may be assigned to the branch
        when aborting.
      operationId: abortBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /modelgeneration/addBranch:
    get:
      tags:
        - modelgeneration
      description: Adds a new branch with the input name to the model.
      operationId: addBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"
  /modelgeneration/branchInfo:
    get:
      tags:
        - modelgeneration
      description: Will return details of branch identified by the input argument,
        including units on the branch and the configuration disjoint with the master
        generation. An error is returned if no in-flight branch matching in input
        is found.
      operationId: branchInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchInfoArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchResults"
  /modelgeneration/commitBranch:
    get:
      tags:
        - modelgeneration
      description: Commits the input branch, making its changes applicable to the
        whole model and marking it complete.
      operationId: commitBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntResult"
  /modelgeneration/hasActiveBranch:
    get:
      tags:
        - modelgeneration
      description: Returns a true result if the input model has an "in-flight" branch
        matching the input name.
      operationId: hasActiveBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResult"
  /modelgeneration/listCommits:
    get:
      tags:
        - modelgeneration
      description: Will return the commits, hence only branches with generation_id
        higher than 0
      operationId: listCommits
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchResults"
  /modelgeneration/showCommit:
    get:
      tags:
        - modelgeneration
      description: Will return details a commit given by its generationId An error
        is returned if either no branch can be found corresponding to the generation
        id. Or the generation id given is below 1.
      operationId: showCommit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerationId"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerationResult"
  /modelgeneration/trackBranch:
    get:
      tags:
        - modelgeneration
      description: Marks the input units and/or applications as tracking the input
        branch, causing them to realise changes made under that branch.
      operationId: trackBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchTrackArg"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelmanager/changeModelCredential:
    get:
      tags:
        - modelmanager
      description: Changes cloud credential reference for models. These new cloud
        credentials must already exist on the controller.
      operationId: changeModelCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeModelCredentialsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelmanager/createModel:
    get:
      tags:
        - modelmanager
      description: Creates a new model using the account and model config specified
        in the args.
      operationId: createModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelCreateArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInfo"
  /modelmanager/destroyModels:
    get:
      tags:
        - modelmanager
      description: Will try to destroy the specified models. If there is a block on
        destruction, this method will return an error. From ModelManager v7 onwards,
        DestroyModels gains 'force' and 'max-wait' parameters.
      operationId: destroyModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyModelsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelmanager/dumpModels:
    get:
      tags:
        - modelmanager
      description: Will export the models into the database agnostic representation.
        The user needs to either be a controller admin, or have admin privileges on
        the model itself.
      operationId: dumpModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DumpModelRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResults"
  /modelmanager/dumpModelsDB:
    get:
      tags:
        - modelmanager
      description: Will gather all documents from all model collections for the specified
        model. The map result contains a map of collection names to lists of documents
        represented as maps.
      operationId: dumpModelsDB
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapResults"
  /modelmanager/listModelSummaries:
    get:
      tags:
        - modelmanager
      description: Returns models that the specified user has access to in the current
        server.  Controller admins (superuser) can list models for any user.  Other
        users can only ask about their own models.
      operationId: listModelSummaries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelSummariesRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelSummaryResults"
  /modelmanager/listModels:
    get:
      tags:
        - modelmanager
      description: Returns the models that the specified user has access to in the
        current server.  Controller admins (superuser) can list models for any user.  Other
        users can only ask about their own models.
      operationId: listModels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModelList"
  /modelmanager/modelDefaultsForClouds:
    get:
      tags:
        - modelmanager
      description: Returns the default config values for the specified clouds.
      operationId: modelDefaultsForClouds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelDefaultsResults"
  /modelmanager/modelInfo:
    get:
      tags:
        - modelmanager
      description: Returns information about the specified models.
      operationId: modelInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInfoResults"
  /modelmanager/modelStatus:
    get:
      tags:
        - modelmanager
      description: Returns a summary of the model.
      operationId: modelStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelStatusResults"
  /modelmanager/modifyModelAccess:
    get:
      tags:
        - modelmanager
      description: Changes the model access granted to users.
      operationId: modifyModelAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyModelAccessRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelmanager/setModelDefaults:
    get:
      tags:
        - modelmanager
      description: Writes new values for the specified default model settings.
      operationId: setModelDefaults
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetModelDefaults"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelmanager/unsetModelDefaults:
    get:
      tags:
        - modelmanager
      description: Removes the specified default model settings.
      operationId: unsetModelDefaults
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnsetModelDefaults"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /modelupgrader/abortModelUpgrade:
    get:
      tags:
        - modelupgrader
      description: Aborts and archives the model upgrade synchronisation record, if
        any.
      operationId: abortModelUpgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelParam"
        required: true
  /modelupgrader/upgradeModel:
    get:
      tags:
        - modelupgrader
      description: Upgrades a model.
      operationId: upgradeModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpgradeModelParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpgradeModelResult"
  /payloads/list:
    get:
      tags:
        - payloads
      description: Builds the list of payloads being tracked for the given unit and
        IDs. If no IDs are provided then all tracked payloads for the unit are returned.
      operationId: list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayloadListArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayloadListResults"
  /pinger/ping:
    get:
      tags:
        - pinger
      description: ""
      operationId: ping
  /pinger/stop:
    get:
      tags:
        - pinger
      description: ""
      operationId: stop
  /resources/addPendingResources:
    get:
      tags:
        - resources
      description: Adds the provided resources (info) to the Juju model in a pending
        state, meaning they are not available until resolved. Handles CharmHub and
        Local charms.
      operationId: addPendingResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPendingResourcesArgsV2"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPendingResourcesResult"
  /resources/listResources:
    get:
      tags:
        - resources
      description: Returns the list of resources for the given application.
      operationId: listResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListResourcesArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcesResults"
  /sshclient/allAddresses:
    get:
      tags:
        - sshclient
      description: Reports all addresses that might have SSH listening for each entity
        in args. The result is sorted with public addresses first. Machines and units
        are supported as entity types.
      operationId: allAddresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SSHAddressesResults"
  /sshclient/modelCredentialForSSH:
    get:
      tags:
        - sshclient
      description: Returns a cloud spec for ssh purpose. This facade call is only
        used for k8s model.
      operationId: modelCredentialForSSH
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudSpecResult"
  /sshclient/privateAddress:
    get:
      tags:
        - sshclient
      description: Reports the preferred private network address for one or more entities.
        Machines and units are supported.
      operationId: privateAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SSHAddressResults"
  /sshclient/proxy:
    get:
      tags:
        - sshclient
      description: Returns whether SSH connections should be proxied through the controller
        hosts for the model associated with the API connection.
      operationId: proxy
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SSHProxyResult"
  /sshclient/publicAddress:
    get:
      tags:
        - sshclient
      description: Reports the preferred public network address for one or more entities.
        Machines and units are supported.
      operationId: publicAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SSHAddressResults"
  /sshclient/publicKeys:
    get:
      tags:
        - sshclient
      description: Returns the public SSH hosts for one or more entities. Machines
        and units are supported.
      operationId: publicKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SSHPublicKeysResults"
  /secretbackends/addSecretBackends:
    get:
      tags:
        - secretbackends
      description: Adds new secret backends.
      operationId: addSecretBackends
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSecretBackendArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /secretbackends/listSecretBackends:
    get:
      tags:
        - secretbackends
      description: Lists available secret backends.
      operationId: listSecretBackends
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSecretBackendsArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecretBackendsResults"
  /secretbackends/removeSecretBackends:
    get:
      tags:
        - secretbackends
      description: Removes secret backends.
      operationId: removeSecretBackends
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveSecretBackendArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /secretbackends/updateSecretBackends:
    get:
      tags:
        - secretbackends
      description: Updates secret backends.
      operationId: updateSecretBackends
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSecretBackendArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /secrets/listSecrets:
    get:
      tags:
        - secrets
      description: Lists available secrets.
      operationId: listSecrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSecretsArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecretResults"
  /spaces/createSpaces:
    get:
      tags:
        - spaces
      description: Creates a new Juju network space, associating the specified subnets
        with it (optional; can be empty).
      operationId: createSpaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSpacesParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /spaces/listSpaces:
    get:
      tags:
        - spaces
      description: Lists all the available spaces and their associated subnets.
      operationId: listSpaces
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSpacesResults"
  /spaces/moveSubnets:
    get:
      tags:
        - spaces
      description: Ensures that the input subnets are in the input space.
      operationId: moveSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveSubnetsParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoveSubnetsResults"
  /spaces/reloadSpaces:
    get:
      tags:
        - spaces
      description: Refreshes spaces from substrate
      operationId: reloadSpaces
  /spaces/removeSpace:
    get:
      tags:
        - spaces
      description: Removes a space. Returns SpaceResults if entities/settings are
        found which makes the deletion not possible.
      operationId: removeSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveSpaceParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveSpaceResults"
  /spaces/renameSpace:
    get:
      tags:
        - spaces
      description: Renames a space.
      operationId: renameSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenameSpacesParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /spaces/showSpace:
    get:
      tags:
        - spaces
      description: Shows the spaces for a set of given entities.
      operationId: showSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowSpaceResults"
  /storage/addToUnit:
    get:
      tags:
        - storage
      description: Validates and creates additional storage instances for units. A
        "CHANGE" block can block this operation.
      operationId: addToUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoragesAddParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddStorageResults"
  /storage/attach:
    get:
      tags:
        - storage
      description: Attaches existing storage instances to units. A "CHANGE" block
        can block this operation.
      operationId: attach
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageAttachmentIds"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /storage/createPool:
    get:
      tags:
        - storage
      description: Creates a new pool with specified parameters.
      operationId: createPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoragePoolArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /storage/detachStorage:
    get:
      tags:
        - storage
      description: Sets the specified storage attachments to Dying, unless they are
        already Dying or Dead. Any associated, persistent storage will remain alive.
        This call can be forced.
      operationId: detachStorage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageDetachmentParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /storage/import:
    get:
      tags:
        - storage
      description: Imports existing storage into the model. A "CHANGE" block can block
        this operation.
      operationId: import
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkImportStorageParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportStorageResults"
  /storage/listFilesystems:
    get:
      tags:
        - storage
      description: Returns a list of filesystems in the environment matching the provided
        filter. Each result describes a filesystem in detail, including the filesystem's
        attachments.
      operationId: listFilesystems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesystemFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesystemDetailsListResults"
  /storage/listPools:
    get:
      tags:
        - storage
      description: Returns a list of pools. If filter is provided, returned list only
        contains pools that match the filter. Pools can be filtered on names and provider
        types. If both names and types are provided as filter, pools that match either
        are returned. This method lists union of pools and environment provider types.
        If no filter is provided, all pools are returned.
      operationId: listPools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoragePoolFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoragePoolsResults"
  /storage/listStorageDetails:
    get:
      tags:
        - storage
      description: Returns storage matching a filter.
      operationId: listStorageDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageDetailsListResults"
  /storage/listVolumes:
    get:
      tags:
        - storage
      description: Lists volumes with the given filters. Each filter produces an independent
        list of volumes, or an error if the filter is invalid or the volumes could
        not be listed.
      operationId: listVolumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeDetailsListResults"
  /storage/remove:
    get:
      tags:
        - storage
      description: Sets the specified storage entities to Dying, unless they are already
        Dying or Dead, such that the storage will eventually be removed from the model.
        If the arguments specify that the storage should be destroyed, then the associated
        cloud storage will be destroyed first; otherwise it will only be released
        from Juju's control.
      operationId: remove
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveStorage"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /storage/removePool:
    get:
      tags:
        - storage
      description: Deletes the named pool
      operationId: removePool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoragePoolDeleteArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /storage/storageDetails:
    get:
      tags:
        - storage
      description: Retrieves and returns detailed information about desired storage
        identified by supplied tags. If specified storage cannot be retrieved, individual
        error is returned instead of storage information.
      operationId: storageDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageDetailsResults"
  /storage/updatePool:
    get:
      tags:
        - storage
      description: Deletes the named pool
      operationId: updatePool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoragePoolArgs"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /subnets/allZones:
    get:
      tags:
        - subnets
      description: Returns all availability zones known to Juju. If a zone is unusable,
        unavailable, or deprecated the Available field will be false.
      operationId: allZones
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneResults"
  /subnets/listSubnets:
    get:
      tags:
        - subnets
      description: Returns the matching subnets after applying optional filters.
      operationId: listSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubnetsFilters"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSubnetsResults"
  /subnets/subnetsByCIDR:
    get:
      tags:
        - subnets
      description: Returns the collection of subnets matching each CIDR in the input.
      operationId: subnetsByCIDR
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CIDRParams"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubnetsResults"
  /usermanager/addUser:
    get:
      tags:
        - usermanager
      description: Adds a user with a username, and either a password or a randomly
        generated secret key which will be returned.
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUsers"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResults"
  /usermanager/disableUser:
    get:
      tags:
        - usermanager
      description: Disables one or more users.  If the user is already disabled, the
        action is considered a success.
      operationId: disableUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /usermanager/enableUser:
    get:
      tags:
        - usermanager
      description: Enables one or more users.  If the user is already enabled, the
        action is considered a success.
      operationId: enableUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /usermanager/modelUserInfo:
    get:
      tags:
        - usermanager
      description: Returns information on all users in the model.
      operationId: modelUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelUserInfoResults"
  /usermanager/removeUser:
    get:
      tags:
        - usermanager
      description: "Permanently removes a user from the current controller for each
        entity provided. While the user is permanently removed we keep it's information
        around for auditing purposes. TODO(redir): Add information about getting deleted
        user information when we add that capability."
      operationId: removeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /usermanager/resetPassword:
    get:
      tags:
        - usermanager
      description: Resets password for supplied users by invalidating current passwords
        (if any) and generating new random secret keys which will be returned. Users
        cannot reset their own password.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entities"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResults"
  /usermanager/setPassword:
    get:
      tags:
        - usermanager
      description: Changes the stored password for the specified users.
      operationId: setPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPasswords"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResults"
  /usermanager/userInfo:
    get:
      tags:
        - usermanager
      description: Returns information on a user.
      operationId: userInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfoRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoResults"
components:
  schemas:
    Action:
      type: object
      properties:
        execution-group:
          type: string
        name:
          type: string
        parallel:
          type: boolean
        parameters:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        receiver:
          type: string
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - receiver
        - name
    ActionMessage:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - timestamp
        - message
    ActionResult:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/Action"
        completed:
          type: string
          format: date-time
        enqueued:
          type: string
          format: date-time
        error:
          $ref: "#/components/schemas/Error"
        log:
          type: array
          items:
            $ref: "#/components/schemas/ActionMessage"
        message:
          type: string
        output:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        started:
          type: string
          format: date-time
        status:
          type: string
      additionalProperties: false
    ActionResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ActionResult"
      additionalProperties: false
    ActionSpec:
      type: object
      properties:
        description:
          type: string
        params:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - description
        - params
    Actions:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
      additionalProperties: false
    ApplicationCharmActionsResult:
      type: object
      properties:
        actions:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ActionSpec"
        application-tag:
          type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    ApplicationsCharmActionsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationCharmActionsResult"
      additionalProperties: false
    EnqueuedActions:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/ActionResult"
        operation:
          type: string
      additionalProperties: false
      required:
        - operation
    Entities:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
      additionalProperties: false
      required:
        - entities
    Entity:
      type: object
      properties:
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
    Error:
      type: object
      properties:
        code:
          type: string
        info:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        message:
          type: string
      additionalProperties: false
      required:
        - message
        - code
    OperationQueryArgs:
      type: object
      properties:
        actions:
          type: array
          items:
            type: string
        applications:
          type: array
          items:
            type: string
        limit:
          type: integer
        machines:
          type: array
          items:
            type: string
        offset:
          type: integer
        status:
          type: array
          items:
            type: string
        units:
          type: array
          items:
            type: string
      additionalProperties: false
    OperationResult:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/ActionResult"
        completed:
          type: string
          format: date-time
        enqueued:
          type: string
          format: date-time
        error:
          $ref: "#/components/schemas/Error"
        fail:
          type: string
        operation:
          type: string
        started:
          type: string
          format: date-time
        status:
          type: string
        summary:
          type: string
      additionalProperties: false
      required:
        - operation
        - summary
    OperationResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/OperationResult"
        truncated:
          type: boolean
      additionalProperties: false
    RunParams:
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        commands:
          type: string
        execution-group:
          type: string
        machines:
          type: array
          items:
            type: string
        parallel:
          type: boolean
        timeout:
          type: integer
        units:
          type: array
          items:
            type: string
        workload-context:
          type: boolean
      additionalProperties: false
      required:
        - commands
        - timeout
    StringsWatchResult:
      type: object
      properties:
        changes:
          type: array
          items:
            type: string
        error:
          $ref: "#/components/schemas/Error"
        watcher-id:
          type: string
      additionalProperties: false
      required:
        - watcher-id
    StringsWatchResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StringsWatchResult"
      additionalProperties: false
      required:
        - results
    Address:
      type: object
      properties:
        cidr:
          type: string
        config-type:
          type: string
        is-secondary:
          type: boolean
        scope:
          type: string
        space-id:
          type: string
        space-name:
          type: string
        type:
          type: string
        value:
          type: string
      additionalProperties: false
      required:
        - value
        - type
        - scope
    AuthUserInfo:
      type: object
      properties:
        controller-access:
          type: string
        credentials:
          type: string
        display-name:
          type: string
        identity:
          type: string
        last-connection:
          type: string
          format: date-time
        model-access:
          type: string
      additionalProperties: false
      required:
        - display-name
        - identity
        - controller-access
        - model-access
    FacadeVersions:
      type: object
      properties:
        name:
          type: string
        versions:
          type: array
          items:
            type: integer
      additionalProperties: false
      required:
        - name
        - versions
    HostPort:
      type: object
      properties:
        Address:
          $ref: "#/components/schemas/Address"
        cidr:
          type: string
        config-type:
          type: string
        is-secondary:
          type: boolean
        port:
          type: integer
        scope:
          type: string
        space-id:
          type: string
        space-name:
          type: string
        type:
          type: string
        value:
          type: string
      additionalProperties: false
      required:
        - value
        - type
        - scope
        - Address
        - port
    LoginRequest:
      type: object
      properties:
        auth-tag:
          type: string
        bakery-version:
          type: integer
        cli-args:
          type: string
        client-version:
          type: string
        credentials:
          type: string
        macaroons:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Macaroon"
        nonce:
          type: string
        user-data:
          type: string
      additionalProperties: false
      required:
        - auth-tag
        - credentials
        - nonce
        - macaroons
        - user-data
    LoginResult:
      type: object
      properties:
        bakery-discharge-required:
          $ref: "#/components/schemas/Macaroon"
        controller-tag:
          type: string
        discharge-required:
          $ref: "#/components/schemas/Macaroon"
        discharge-required-error:
          type: string
        facades:
          type: array
          items:
            $ref: "#/components/schemas/FacadeVersions"
        model-tag:
          type: string
        public-dns-name:
          type: string
        server-version:
          type: string
        servers:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/HostPort"
        user-info:
          $ref: "#/components/schemas/AuthUserInfo"
      additionalProperties: false
    Macaroon:
      type: object
      additionalProperties: false
    RedirectInfoResult:
      type: object
      properties:
        ca-cert:
          type: string
        servers:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/HostPort"
      additionalProperties: false
      required:
        - servers
        - ca-cert
    AllWatcherNextResults:
      type: object
      properties:
        deltas:
          type: array
          items:
            $ref: "#/components/schemas/Delta"
      additionalProperties: false
      required:
        - deltas
    Delta:
      type: object
      properties:
        entity:
          type: object
          additionalProperties: true
        removed:
          type: boolean
      additionalProperties: false
      required:
        - removed
        - entity
    AnnotationsGetResult:
      type: object
      properties:
        annotations:
          type: object
          patternProperties:
            .*:
              type: string
        entity:
          type: string
        error:
          $ref: "#/components/schemas/ErrorResult"
      additionalProperties: false
      required:
        - entity
        - annotations
    AnnotationsGetResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AnnotationsGetResult"
      additionalProperties: false
      required:
        - results
    AnnotationsSet:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/EntityAnnotations"
      additionalProperties: false
      required:
        - annotations
    EntityAnnotations:
      type: object
      properties:
        annotations:
          type: object
          patternProperties:
            .*:
              type: string
        entity:
          type: string
      additionalProperties: false
      required:
        - entity
        - annotations
    ErrorResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    ErrorResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ErrorResult"
      additionalProperties: false
      required:
        - results
    AddApplicationUnits:
      type: object
      properties:
        application:
          type: string
        attach-storage:
          type: array
          items:
            type: string
        num-units:
          type: integer
        placement:
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        policy:
          type: string
      additionalProperties: false
      required:
        - application
        - num-units
        - placement
    AddApplicationUnitsResults:
      type: object
      properties:
        units:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - units
    AddRelation:
      type: object
      properties:
        endpoints:
          type: array
          items:
            type: string
        via-cidrs:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - endpoints
    AddRelationResults:
      type: object
      properties:
        endpoints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmRelation"
      additionalProperties: false
      required:
        - endpoints
    ApplicationCharmRelations:
      type: object
      properties:
        application:
          type: string
      additionalProperties: false
      required:
        - application
    ApplicationCharmRelationsResults:
      type: object
      properties:
        charm-relations:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - charm-relations
    ApplicationConfigUnsetArgs:
      type: object
      properties:
        Args:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationUnset"
      additionalProperties: false
      required:
        - Args
    ApplicationConstraint:
      type: object
      properties:
        constraints:
          $ref: "#/components/schemas/Value"
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - constraints
    ApplicationDeploy:
      type: object
      properties:
        Force:
          type: boolean
        application:
          type: string
        attach-storage:
          type: array
          items:
            type: string
        channel:
          type: string
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        charm-url:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: string
        config-yaml:
          type: string
        constraints:
          $ref: "#/components/schemas/Value"
        devices:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/Constraints"
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        num-units:
          type: integer
        placement:
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        policy:
          type: string
        resources:
          type: object
          patternProperties:
            .*:
              type: string
        storage:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/Constraints"
      additionalProperties: false
      required:
        - application
        - charm-url
        - channel
        - num-units
        - config-yaml
        - constraints
        - Force
    ApplicationExpose:
      type: object
      properties:
        application:
          type: string
        exposed-endpoints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ExposedEndpoint"
      additionalProperties: false
      required:
        - application
    ApplicationGet:
      type: object
      properties:
        application:
          type: string
        branch:
          type: string
      additionalProperties: false
      required:
        - application
        - branch
    ApplicationGetArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationGet"
      additionalProperties: false
      required:
        - args
    ApplicationGetConfigResults:
      type: object
      properties:
        Results:
          type: array
          items:
            $ref: "#/components/schemas/ConfigResult"
      additionalProperties: false
      required:
        - Results
    ApplicationGetConstraintsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationConstraint"
      additionalProperties: false
      required:
        - results
    ApplicationGetResults:
      type: object
      properties:
        application:
          type: string
        application-config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        base:
          $ref: "#/components/schemas/Base"
        channel:
          type: string
        charm:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        constraints:
          $ref: "#/components/schemas/Value"
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
      additionalProperties: false
      required:
        - application
        - charm
        - config
        - constraints
        - base
        - channel
    ApplicationInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ApplicationResult"
      additionalProperties: false
    ApplicationInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationInfoResult"
      additionalProperties: false
      required:
        - results
    ApplicationMergeBindings:
      type: object
      properties:
        application-tag:
          type: string
        bindings:
          type: object
          patternProperties:
            .*:
              type: string
        force:
          type: boolean
      additionalProperties: false
      required:
        - application-tag
        - bindings
        - force
    ApplicationMergeBindingsArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMergeBindings"
      additionalProperties: false
      required:
        - args
    ApplicationMetricCredential:
      type: object
      properties:
        application:
          type: string
        metrics-credentials:
          type: array
          items:
            type: integer
      additionalProperties: false
      required:
        - application
        - metrics-credentials
    ApplicationMetricCredentials:
      type: object
      properties:
        creds:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMetricCredential"
      additionalProperties: false
      required:
        - creds
    ApplicationOfferDetails:
      type: object
      properties:
        application-description:
          type: string
        bindings:
          type: object
          patternProperties:
            .*:
              type: string
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/RemoteEndpoint"
        offer-name:
          type: string
        offer-url:
          type: string
        offer-uuid:
          type: string
        source-model-tag:
          type: string
        spaces:
          type: array
          items:
            $ref: "#/components/schemas/RemoteSpace"
        users:
          type: array
          items:
            $ref: "#/components/schemas/OfferUserDetails"
      additionalProperties: false
      required:
        - source-model-tag
        - offer-uuid
        - offer-url
        - offer-name
        - application-description
    ApplicationResult:
      type: object
      properties:
        base:
          $ref: "#/components/schemas/Base"
        channel:
          type: string
        charm:
          type: string
        constraints:
          $ref: "#/components/schemas/Value"
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        exposed:
          type: boolean
        exposed-endpoints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ExposedEndpoint"
        life:
          type: string
        principal:
          type: boolean
        remote:
          type: boolean
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - principal
        - exposed
        - remote
        - life
    ApplicationSetCharm:
      type: object
      properties:
        application:
          type: string
        channel:
          type: string
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        charm-url:
          type: string
        config-settings:
          type: object
          patternProperties:
            .*:
              type: string
        config-settings-yaml:
          type: string
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        force:
          type: boolean
        force-base:
          type: boolean
        force-units:
          type: boolean
        generation:
          type: string
        resource-ids:
          type: object
          patternProperties:
            .*:
              type: string
        storage-constraints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/StorageConstraints"
      additionalProperties: false
      required:
        - application
        - generation
        - charm-url
        - channel
        - force
        - force-units
        - force-base
    ApplicationUnexpose:
      type: object
      properties:
        application:
          type: string
        exposed-endpoints:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - application
        - exposed-endpoints
    ApplicationUnset:
      type: object
      properties:
        application:
          type: string
        branch:
          type: string
        options:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - application
        - branch
        - options
    ApplicationsDeploy:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationDeploy"
      additionalProperties: false
      required:
        - applications
    Base:
      type: object
      properties:
        channel:
          type: string
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - channel
    CharmOrigin:
      type: object
      properties:
        architecture:
          type: string
        base:
          $ref: "#/components/schemas/Base"
        branch:
          type: string
        hash:
          type: string
        id:
          type: string
        instance-key:
          type: string
        revision:
          type: integer
        risk:
          type: string
        source:
          type: string
        track:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - source
        - type
        - id
    CharmRelation:
      type: object
      properties:
        interface:
          type: string
        limit:
          type: integer
        name:
          type: string
        optional:
          type: boolean
        role:
          type: string
        scope:
          type: string
      additionalProperties: false
      required:
        - name
        - role
        - interface
        - optional
        - limit
        - scope
    CharmURLOriginResult:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        error:
          $ref: "#/components/schemas/Error"
        url:
          type: string
      additionalProperties: false
      required:
        - url
        - charm-origin
    ConfigResult:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - config
    ConfigSet:
      type: object
      properties:
        application:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: string
        config-yaml:
          type: string
        generation:
          type: string
      additionalProperties: false
      required:
        - application
        - generation
        - config
        - config-yaml
    ConfigSetArgs:
      type: object
      properties:
        Args:
          type: array
          items:
            $ref: "#/components/schemas/ConfigSet"
      additionalProperties: false
      required:
        - Args
    Constraints:
      type: object
      properties:
        Count:
          type: integer
        Pool:
          type: string
        Size:
          type: integer
      additionalProperties: false
      required:
        - Pool
        - Size
        - Count
    ConsumeApplicationArg:
      type: object
      properties:
        ApplicationOfferDetails:
          $ref: "#/components/schemas/ApplicationOfferDetails"
        application-alias:
          type: string
        application-description:
          type: string
        bindings:
          type: object
          patternProperties:
            .*:
              type: string
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/RemoteEndpoint"
        external-controller:
          $ref: "#/components/schemas/ExternalControllerInfo"
        macaroon:
          $ref: "#/components/schemas/Macaroon"
        offer-name:
          type: string
        offer-url:
          type: string
        offer-uuid:
          type: string
        source-model-tag:
          type: string
        spaces:
          type: array
          items:
            $ref: "#/components/schemas/RemoteSpace"
        users:
          type: array
          items:
            $ref: "#/components/schemas/OfferUserDetails"
      additionalProperties: false
      required:
        - source-model-tag
        - offer-uuid
        - offer-url
        - offer-name
        - application-description
        - ApplicationOfferDetails
    ConsumeApplicationArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/ConsumeApplicationArg"
      additionalProperties: false
    DeployFromRepositoryArg:
      type: object
      properties:
        ApplicationName:
          type: string
        AttachStorage:
          type: array
          items:
            type: string
        CharmName:
          type: string
        ConfigYAML:
          type: string
        Cons:
          $ref: "#/components/schemas/Value"
        Devices:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/Constraints"
        DryRun:
          type: boolean
        Placement:
          type: array
          items:
            $ref: "#/components/schemas/Placement"
        Storage:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/Constraints"
        Trust:
          type: boolean
        base:
          $ref: "#/components/schemas/Base"
        channel:
          type: string
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        force:
          type: boolean
        num-units:
          type: integer
        resources:
          type: object
          patternProperties:
            .*:
              type: string
        revision:
          type: integer
      additionalProperties: false
      required:
        - CharmName
        - ApplicationName
        - AttachStorage
        - ConfigYAML
        - Cons
        - Devices
        - DryRun
        - Placement
        - Storage
        - Trust
    DeployFromRepositoryArgs:
      type: object
      properties:
        Args:
          type: array
          items:
            $ref: "#/components/schemas/DeployFromRepositoryArg"
      additionalProperties: false
      required:
        - Args
    DeployFromRepositoryInfo:
      type: object
      properties:
        architecture:
          type: string
        base:
          $ref: "#/components/schemas/Base"
        channel:
          type: string
        charm-url:
          type: string
        effective-channel:
          type: string
      additionalProperties: false
      required:
        - charm-url
        - architecture
    DeployFromRepositoryResult:
      type: object
      properties:
        Errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
        Info:
          $ref: "#/components/schemas/DeployFromRepositoryInfo"
        PendingResourceUploads:
          type: array
          items:
            $ref: "#/components/schemas/PendingResourceUpload"
      additionalProperties: false
      required:
        - Errors
        - Info
        - PendingResourceUploads
    DeployFromRepositoryResults:
      type: object
      properties:
        Results:
          type: array
          items:
            $ref: "#/components/schemas/DeployFromRepositoryResult"
      additionalProperties: false
      required:
        - Results
    DestroyApplicationInfo:
      type: object
      properties:
        destroyed-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        destroyed-units:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        detached-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
      additionalProperties: false
    DestroyApplicationParams:
      type: object
      properties:
        application-tag:
          type: string
        destroy-storage:
          type: boolean
        dry-run:
          type: boolean
        force:
          type: boolean
        max-wait:
          type: integer
      additionalProperties: false
      required:
        - application-tag
        - force
    DestroyApplicationResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        info:
          $ref: "#/components/schemas/DestroyApplicationInfo"
      additionalProperties: false
    DestroyApplicationResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/DestroyApplicationResult"
      additionalProperties: false
    DestroyApplicationsParams:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/DestroyApplicationParams"
      additionalProperties: false
      required:
        - applications
    DestroyConsumedApplicationParams:
      type: object
      properties:
        application-tag:
          type: string
        force:
          type: boolean
        max-wait:
          type: integer
      additionalProperties: false
      required:
        - application-tag
    DestroyConsumedApplicationsParams:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/DestroyConsumedApplicationParams"
      additionalProperties: false
      required:
        - applications
    DestroyRelation:
      type: object
      properties:
        endpoints:
          type: array
          items:
            type: string
        force:
          type: boolean
        max-wait:
          type: integer
        relation-id:
          type: integer
      additionalProperties: false
      required:
        - relation-id
    DestroyUnitInfo:
      type: object
      properties:
        destroyed-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        detached-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
      additionalProperties: false
    DestroyUnitParams:
      type: object
      properties:
        destroy-storage:
          type: boolean
        dry-run:
          type: boolean
        force:
          type: boolean
        max-wait:
          type: integer
        unit-tag:
          type: string
      additionalProperties: false
      required:
        - unit-tag
    DestroyUnitResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        info:
          $ref: "#/components/schemas/DestroyUnitInfo"
      additionalProperties: false
    DestroyUnitResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/DestroyUnitResult"
      additionalProperties: false
    DestroyUnitsParams:
      type: object
      properties:
        units:
          type: array
          items:
            $ref: "#/components/schemas/DestroyUnitParams"
      additionalProperties: false
      required:
        - units
    EndpointRelationData:
      type: object
      properties:
        ApplicationData:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        cross-model:
          type: boolean
        endpoint:
          type: string
        related-endpoint:
          type: string
        relation-id:
          type: integer
        unit-relation-data:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/RelationData"
      additionalProperties: false
      required:
        - relation-id
        - endpoint
        - cross-model
        - related-endpoint
        - ApplicationData
        - unit-relation-data
    ExposedEndpoint:
      type: object
      properties:
        expose-to-cidrs:
          type: array
          items:
            type: string
        expose-to-spaces:
          type: array
          items:
            type: string
      additionalProperties: false
    ExternalControllerInfo:
      type: object
      properties:
        addrs:
          type: array
          items:
            type: string
        ca-cert:
          type: string
        controller-alias:
          type: string
        controller-tag:
          type: string
      additionalProperties: false
      required:
        - controller-tag
        - controller-alias
        - addrs
        - ca-cert
    OfferUserDetails:
      type: object
      properties:
        access:
          type: string
        display-name:
          type: string
        user:
          type: string
      additionalProperties: false
      required:
        - user
        - display-name
        - access
    PendingResourceUpload:
      type: object
      properties:
        Filename:
          type: string
        Name:
          type: string
        Type:
          type: string
        pending-id:
          type: string
      additionalProperties: false
      required:
        - Name
        - Filename
        - pending-id
        - Type
    Placement:
      type: object
      properties:
        directive:
          type: string
        scope:
          type: string
      additionalProperties: false
      required:
        - scope
        - directive
    RelationData:
      type: object
      properties:
        InScope:
          type: boolean
        UnitData:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - InScope
        - UnitData
    RelationSuspendedArg:
      type: object
      properties:
        message:
          type: string
        relation-id:
          type: integer
        suspended:
          type: boolean
      additionalProperties: false
      required:
        - relation-id
        - message
        - suspended
    RelationSuspendedArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/RelationSuspendedArg"
      additionalProperties: false
      required:
        - args
    RemoteEndpoint:
      type: object
      properties:
        interface:
          type: string
        limit:
          type: integer
        name:
          type: string
        role:
          type: string
      additionalProperties: false
      required:
        - name
        - role
        - interface
        - limit
    RemoteSpace:
      type: object
      properties:
        cloud-type:
          type: string
        name:
          type: string
        provider-attributes:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        provider-id:
          type: string
        subnets:
          type: array
          items:
            $ref: "#/components/schemas/Subnet"
      additionalProperties: false
      required:
        - cloud-type
        - name
        - provider-id
        - provider-attributes
        - subnets
    ScaleApplicationInfo:
      type: object
      properties:
        num-units:
          type: integer
      additionalProperties: false
      required:
        - num-units
    ScaleApplicationParams:
      type: object
      properties:
        application-tag:
          type: string
        force:
          type: boolean
        scale:
          type: integer
        scale-change:
          type: integer
      additionalProperties: false
      required:
        - application-tag
        - scale
        - force
    ScaleApplicationResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        info:
          $ref: "#/components/schemas/ScaleApplicationInfo"
      additionalProperties: false
    ScaleApplicationResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ScaleApplicationResult"
      additionalProperties: false
    ScaleApplicationsParams:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ScaleApplicationParams"
      additionalProperties: false
      required:
        - applications
    SetConstraints:
      type: object
      properties:
        application:
          type: string
        constraints:
          $ref: "#/components/schemas/Value"
      additionalProperties: false
      required:
        - application
        - constraints
    StorageConstraints:
      type: object
      properties:
        count:
          type: integer
        pool:
          type: string
        size:
          type: integer
      additionalProperties: false
    StringResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: string
      additionalProperties: false
      required:
        - result
    Subnet:
      type: object
      properties:
        cidr:
          type: string
        life:
          type: string
        provider-id:
          type: string
        provider-network-id:
          type: string
        provider-space-id:
          type: string
        space-tag:
          type: string
        status:
          type: string
        vlan-tag:
          type: integer
        zones:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - cidr
        - vlan-tag
        - life
        - space-tag
        - zones
    UnitInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/UnitResult"
      additionalProperties: false
    UnitInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UnitInfoResult"
      additionalProperties: false
      required:
        - results
    UnitResult:
      type: object
      properties:
        address:
          type: string
        charm:
          type: string
        leader:
          type: boolean
        life:
          type: string
        machine:
          type: string
        opened-ports:
          type: array
          items:
            type: string
        provider-id:
          type: string
        public-address:
          type: string
        relation-data:
          type: array
          items:
            $ref: "#/components/schemas/EndpointRelationData"
        tag:
          type: string
        workload-version:
          type: string
      additionalProperties: false
      required:
        - tag
        - workload-version
        - opened-ports
        - charm
    UnitsResolved:
      type: object
      properties:
        all:
          type: boolean
        retry:
          type: boolean
        tags:
          $ref: "#/components/schemas/Entities"
      additionalProperties: false
    UpdateChannelArg:
      type: object
      properties:
        channel:
          type: string
        force:
          type: boolean
        tag:
          $ref: "#/components/schemas/Entity"
      additionalProperties: false
      required:
        - tag
        - force
        - channel
    UpdateChannelArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/UpdateChannelArg"
      additionalProperties: false
      required:
        - args
    Value:
      type: object
      properties:
        allocate-public-ip:
          type: boolean
        arch:
          type: string
        container:
          type: string
        cores:
          type: integer
        cpu-power:
          type: integer
        image-id:
          type: string
        instance-role:
          type: string
        instance-type:
          type: string
        mem:
          type: integer
        root-disk:
          type: integer
        root-disk-source:
          type: string
        spaces:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        virt-type:
          type: string
        zones:
          type: array
          items:
            type: string
      additionalProperties: false
    AddApplicationOffer:
      type: object
      properties:
        application-description:
          type: string
        application-name:
          type: string
        endpoints:
          type: object
          patternProperties:
            .*:
              type: string
        model-tag:
          type: string
        offer-name:
          type: string
        owner-tag:
          type: string
      additionalProperties: false
      required:
        - model-tag
        - offer-name
        - application-name
        - application-description
        - endpoints
    AddApplicationOffers:
      type: object
      properties:
        Offers:
          type: array
          items:
            $ref: "#/components/schemas/AddApplicationOffer"
      additionalProperties: false
      required:
        - Offers
    ApplicationOfferAdminDetails:
      type: object
      properties:
        ApplicationOfferDetails:
          $ref: "#/components/schemas/ApplicationOfferDetails"
        application-description:
          type: string
        application-name:
          type: string
        bindings:
          type: object
          patternProperties:
            .*:
              type: string
        charm-url:
          type: string
        connections:
          type: array
          items:
            $ref: "#/components/schemas/OfferConnection"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/RemoteEndpoint"
        offer-name:
          type: string
        offer-url:
          type: string
        offer-uuid:
          type: string
        source-model-tag:
          type: string
        spaces:
          type: array
          items:
            $ref: "#/components/schemas/RemoteSpace"
        users:
          type: array
          items:
            $ref: "#/components/schemas/OfferUserDetails"
      additionalProperties: false
      required:
        - source-model-tag
        - offer-uuid
        - offer-url
        - offer-name
        - application-description
        - ApplicationOfferDetails
        - application-name
        - charm-url
    ApplicationOfferResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ApplicationOfferAdminDetails"
      additionalProperties: false
    ApplicationOffersResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationOfferResult"
      additionalProperties: false
    ConsumeOfferDetails:
      type: object
      properties:
        external-controller:
          $ref: "#/components/schemas/ExternalControllerInfo"
        macaroon:
          $ref: "#/components/schemas/Macaroon"
        offer:
          $ref: "#/components/schemas/ApplicationOfferDetails"
      additionalProperties: false
    ConsumeOfferDetailsArg:
      type: object
      properties:
        offer-urls:
          $ref: "#/components/schemas/OfferURLs"
        user-tag:
          type: string
      additionalProperties: false
      required:
        - offer-urls
    ConsumeOfferDetailsResult:
      type: object
      properties:
        ConsumeOfferDetails:
          $ref: "#/components/schemas/ConsumeOfferDetails"
        error:
          $ref: "#/components/schemas/Error"
        external-controller:
          $ref: "#/components/schemas/ExternalControllerInfo"
        macaroon:
          $ref: "#/components/schemas/Macaroon"
        offer:
          $ref: "#/components/schemas/ApplicationOfferDetails"
      additionalProperties: false
      required:
        - ConsumeOfferDetails
    ConsumeOfferDetailsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ConsumeOfferDetailsResult"
      additionalProperties: false
    DestroyApplicationOffers:
      type: object
      properties:
        force:
          type: boolean
        offer-urls:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - offer-urls
    EndpointFilterAttributes:
      type: object
      properties:
        interface:
          type: string
        name:
          type: string
        role:
          type: string
      additionalProperties: false
      required:
        - role
        - interface
        - name
    EntityStatus:
      type: object
      properties:
        data:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        info:
          type: string
        since:
          type: string
          format: date-time
        status:
          type: string
      additionalProperties: false
      required:
        - status
        - info
        - since
    ModifyOfferAccess:
      type: object
      properties:
        access:
          type: string
        action:
          type: string
        offer-url:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - action
        - access
        - offer-url
    ModifyOfferAccessRequest:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/ModifyOfferAccess"
      additionalProperties: false
      required:
        - changes
    OfferConnection:
      type: object
      properties:
        endpoint:
          type: string
        ingress-subnets:
          type: array
          items:
            type: string
        relation-id:
          type: integer
        source-model-tag:
          type: string
        status:
          $ref: "#/components/schemas/EntityStatus"
        username:
          type: string
      additionalProperties: false
      required:
        - source-model-tag
        - relation-id
        - username
        - endpoint
        - status
        - ingress-subnets
    OfferFilter:
      type: object
      properties:
        allowed-users:
          type: array
          items:
            type: string
        application-description:
          type: string
        application-name:
          type: string
        application-user:
          type: string
        connected-users:
          type: array
          items:
            type: string
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/EndpointFilterAttributes"
        model-name:
          type: string
        offer-name:
          type: string
        owner-name:
          type: string
      additionalProperties: false
      required:
        - owner-name
        - model-name
        - offer-name
        - application-name
        - application-description
        - application-user
        - endpoints
        - connected-users
        - allowed-users
    OfferFilters:
      type: object
      properties:
        Filters:
          type: array
          items:
            $ref: "#/components/schemas/OfferFilter"
      additionalProperties: false
      required:
        - Filters
    OfferURLs:
      type: object
      properties:
        bakery-version:
          type: integer
        offer-urls:
          type: array
          items:
            type: string
      additionalProperties: false
    QueryApplicationOffersResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationOfferAdminDetails"
      additionalProperties: false
      required:
        - results
    RemoteApplicationInfo:
      type: object
      properties:
        description:
          type: string
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/RemoteEndpoint"
        icon-url-path:
          type: string
        model-tag:
          type: string
        name:
          type: string
        offer-url:
          type: string
        source-model-label:
          type: string
      additionalProperties: false
      required:
        - model-tag
        - name
        - description
        - offer-url
        - endpoints
        - icon-url-path
    RemoteApplicationInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/RemoteApplicationInfo"
      additionalProperties: false
    RemoteApplicationInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/RemoteApplicationInfoResult"
      additionalProperties: false
      required:
        - results
    BackupsCreateArgs:
      type: object
      properties:
        no-download:
          type: boolean
        notes:
          type: string
      additionalProperties: false
      required:
        - notes
        - no-download
    BackupsMetadataResult:
      type: object
      properties:
        base:
          type: string
        checksum:
          type: string
        checksum-format:
          type: string
        controller-machine-id:
          type: string
        controller-machine-inst-id:
          type: string
        controller-uuid:
          type: string
        filename:
          type: string
        finished:
          type: string
          format: date-time
        format-version:
          type: integer
        ha-nodes:
          type: integer
        hostname:
          type: string
        id:
          type: string
        machine:
          type: string
        model:
          type: string
        notes:
          type: string
        size:
          type: integer
        started:
          type: string
          format: date-time
        stored:
          type: string
          format: date-time
        version:
          $ref: "#/components/schemas/Number"
      additionalProperties: false
      required:
        - id
        - checksum
        - checksum-format
        - size
        - stored
        - started
        - finished
        - notes
        - model
        - machine
        - hostname
        - version
        - base
        - filename
        - format-version
        - controller-uuid
        - controller-machine-id
        - controller-machine-inst-id
        - ha-nodes
    Number:
      type: object
      properties:
        Build:
          type: integer
        Major:
          type: integer
        Minor:
          type: integer
        Patch:
          type: integer
        Tag:
          type: string
      additionalProperties: false
      required:
        - Major
        - Minor
        - Tag
        - Patch
        - Build
    Block:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        tag:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - id
        - tag
        - type
    BlockResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/Block"
      additionalProperties: false
      required:
        - result
    BlockResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/BlockResult"
      additionalProperties: false
    BlockSwitchParams:
      type: object
      properties:
        message:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
    BundleChange:
      type: object
      properties:
        args:
          type: array
          items:
            type: object
            additionalProperties: true
        id:
          type: string
        method:
          type: string
        requires:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - id
        - method
        - args
        - requires
    BundleChangesMapArgs:
      type: object
      properties:
        args:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        id:
          type: string
        method:
          type: string
        requires:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - id
        - method
        - args
        - requires
    BundleChangesMapArgsResults:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/BundleChangesMapArgs"
        errors:
          type: array
          items:
            type: string
      additionalProperties: false
    BundleChangesParams:
      type: object
      properties:
        bundleURL:
          type: string
        yaml:
          type: string
      additionalProperties: false
      required:
        - yaml
        - bundleURL
    BundleChangesResults:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/BundleChange"
        errors:
          type: array
          items:
            type: string
      additionalProperties: false
    ExportBundleParams:
      type: object
      properties:
        include-charm-defaults:
          type: boolean
      additionalProperties: false
    AddCharmWithOrigin:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        force:
          type: boolean
        url:
          type: string
      additionalProperties: false
      required:
        - url
        - charm-origin
        - force
    ApplicationCharmPlacement:
      type: object
      properties:
        application:
          type: string
        charm-url:
          type: string
      additionalProperties: false
      required:
        - application
        - charm-url
    ApplicationCharmPlacements:
      type: object
      properties:
        placements:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationCharmPlacement"
      additionalProperties: false
      required:
        - placements
    Charm:
      type: object
      properties:
        actions:
          $ref: "#/components/schemas/CharmActions"
        config:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmOption"
        lxd-profile:
          $ref: "#/components/schemas/CharmLXDProfile"
        manifest:
          $ref: "#/components/schemas/CharmManifest"
        meta:
          $ref: "#/components/schemas/CharmMeta"
        metrics:
          $ref: "#/components/schemas/CharmMetrics"
        revision:
          type: integer
        url:
          type: string
      additionalProperties: false
      required:
        - revision
        - url
        - config
    CharmActionSpec:
      type: object
      properties:
        description:
          type: string
        params:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - description
        - params
    CharmActions:
      type: object
      properties:
        specs:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmActionSpec"
      additionalProperties: false
    CharmBase:
      type: object
      properties:
        architectures:
          type: array
          items:
            type: string
        channel:
          type: string
        name:
          type: string
      additionalProperties: false
    CharmContainer:
      type: object
      properties:
        mounts:
          type: array
          items:
            $ref: "#/components/schemas/CharmMount"
        resource:
          type: string
      additionalProperties: false
    CharmDeployment:
      type: object
      properties:
        min-version:
          type: string
        mode:
          type: string
        service:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
        - mode
        - service
        - min-version
    CharmDevice:
      type: object
      properties:
        CountMax:
          type: integer
        CountMin:
          type: integer
        Description:
          type: string
        Name:
          type: string
        Type:
          type: string
      additionalProperties: false
      required:
        - Name
        - Description
        - Type
        - CountMin
        - CountMax
    CharmLXDProfile:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: string
        description:
          type: string
        devices:
          type: object
          patternProperties:
            .*:
              type: object
              patternProperties:
                .*:
                  type: string
      additionalProperties: false
      required:
        - config
        - description
        - devices
    CharmManifest:
      type: object
      properties:
        bases:
          type: array
          items:
            $ref: "#/components/schemas/CharmBase"
      additionalProperties: false
    CharmMeta:
      type: object
      properties:
        assumes-expr:
          $ref: "#/components/schemas/ExpressionTree"
        categories:
          type: array
          items:
            type: string
        containers:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmContainer"
        deployment:
          $ref: "#/components/schemas/CharmDeployment"
        description:
          type: string
        devices:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmDevice"
        extra-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        min-juju-version:
          type: string
        name:
          type: string
        payload-classes:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmPayloadClass"
        peers:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmRelation"
        provides:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmRelation"
        requires:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmRelation"
        resources:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmResourceMeta"
        series:
          type: array
          items:
            type: string
        storage:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmStorage"
        subordinate:
          type: boolean
        summary:
          type: string
        tags:
          type: array
          items:
            type: string
        terms:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - name
        - summary
        - description
        - subordinate
    CharmMetric:
      type: object
      properties:
        description:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
        - description
    CharmMetrics:
      type: object
      properties:
        metrics:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/CharmMetric"
        plan:
          $ref: "#/components/schemas/CharmPlan"
      additionalProperties: false
      required:
        - metrics
        - plan
    CharmMount:
      type: object
      properties:
        location:
          type: string
        storage:
          type: string
      additionalProperties: false
    CharmOption:
      type: object
      properties:
        default:
          type: object
          additionalProperties: true
        description:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
    CharmOriginResult:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - charm-origin
    CharmPayloadClass:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - name
        - type
    CharmPlan:
      type: object
      properties:
        required:
          type: boolean
      additionalProperties: false
      required:
        - required
    CharmResource:
      type: object
      properties:
        description:
          type: string
        fingerprint:
          type: array
          items:
            type: integer
        name:
          type: string
        origin:
          type: string
        path:
          type: string
        revision:
          type: integer
        size:
          type: integer
        type:
          type: string
      additionalProperties: false
      required:
        - name
        - type
        - path
        - origin
        - revision
        - fingerprint
        - size
    CharmResourceMeta:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        path:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - name
        - type
        - path
        - description
    CharmResourceResult:
      type: object
      properties:
        CharmResource:
          $ref: "#/components/schemas/CharmResource"
        ErrorResult:
          $ref: "#/components/schemas/ErrorResult"
        description:
          type: string
        error:
          $ref: "#/components/schemas/Error"
        fingerprint:
          type: array
          items:
            type: integer
        name:
          type: string
        origin:
          type: string
        path:
          type: string
        revision:
          type: integer
        size:
          type: integer
        type:
          type: string
      additionalProperties: false
      required:
        - ErrorResult
        - name
        - type
        - path
        - origin
        - revision
        - fingerprint
        - size
        - CharmResource
    CharmResourcesResults:
      type: object
      properties:
        results:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/CharmResourceResult"
      additionalProperties: false
      required:
        - results
    CharmStorage:
      type: object
      properties:
        count-max:
          type: integer
        count-min:
          type: integer
        description:
          type: string
        location:
          type: string
        minimum-size:
          type: integer
        name:
          type: string
        properties:
          type: array
          items:
            type: string
        read-only:
          type: boolean
        shared:
          type: boolean
        type:
          type: string
      additionalProperties: false
      required:
        - name
        - description
        - type
        - shared
        - read-only
        - count-min
        - count-max
        - minimum-size
    CharmURL:
      type: object
      properties:
        url:
          type: string
      additionalProperties: false
      required:
        - url
    CharmURLAndOrigin:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        charm-url:
          type: string
        macaroon:
          $ref: "#/components/schemas/Macaroon"
      additionalProperties: false
      required:
        - charm-url
        - charm-origin
    CharmURLAndOrigins:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/CharmURLAndOrigin"
      additionalProperties: false
      required:
        - entities
    CharmsList:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - names
    CharmsListResult:
      type: object
      properties:
        charm-urls:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - charm-urls
    DownloadInfoResult:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        url:
          type: string
      additionalProperties: false
      required:
        - url
        - charm-origin
    DownloadInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/DownloadInfoResult"
      additionalProperties: false
      required:
        - results
    ExpressionTree:
      type: object
      properties:
        Expression:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - Expression
    IsMeteredResult:
      type: object
      properties:
        metered:
          type: boolean
      additionalProperties: false
      required:
        - metered
    ResolveCharmWithChannel:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        reference:
          type: string
        switch-charm:
          type: boolean
      additionalProperties: false
      required:
        - reference
        - charm-origin
    ResolveCharmWithChannelResult:
      type: object
      properties:
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        error:
          $ref: "#/components/schemas/Error"
        supported-series:
          type: array
          items:
            type: string
        url:
          type: string
      additionalProperties: false
      required:
        - url
        - charm-origin
        - supported-series
    ResolveCharmWithChannelResults:
      type: object
      properties:
        Results:
          type: array
          items:
            $ref: "#/components/schemas/ResolveCharmWithChannelResult"
      additionalProperties: false
      required:
        - Results
    ResolveCharmsWithChannel:
      type: object
      properties:
        macaroon:
          $ref: "#/components/schemas/Macaroon"
        resolve:
          type: array
          items:
            $ref: "#/components/schemas/ResolveCharmWithChannel"
      additionalProperties: false
      required:
        - resolve
    AllWatcherId:
      type: object
      properties:
        watcher-id:
          type: string
      additionalProperties: false
      required:
        - watcher-id
    ApplicationOfferStatus:
      type: object
      properties:
        active-connected-count:
          type: integer
        application-name:
          type: string
        charm:
          type: string
        endpoints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/RemoteEndpoint"
        err:
          $ref: "#/components/schemas/Error"
        offer-name:
          type: string
        total-connected-count:
          type: integer
      additionalProperties: false
      required:
        - offer-name
        - application-name
        - charm
        - endpoints
        - active-connected-count
        - total-connected-count
    ApplicationStatus:
      type: object
      properties:
        base:
          $ref: "#/components/schemas/Base"
        can-upgrade-to:
          type: string
        charm:
          type: string
        charm-channel:
          type: string
        charm-profile:
          type: string
        charm-version:
          type: string
        endpoint-bindings:
          type: object
          patternProperties:
            .*:
              type: string
        err:
          $ref: "#/components/schemas/Error"
        exposed:
          type: boolean
        exposed-endpoints:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ExposedEndpoint"
        int:
          type: integer
        life:
          type: string
        meter-statuses:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/MeterStatus"
        provider-id:
          type: string
        public-address:
          type: string
        relations:
          type: object
          patternProperties:
            .*:
              type: array
              items:
                type: string
        status:
          $ref: "#/components/schemas/DetailedStatus"
        subordinate-to:
          type: array
          items:
            type: string
        units:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/UnitStatus"
        workload-version:
          type: string
      additionalProperties: false
      required:
        - charm
        - charm-version
        - charm-profile
        - base
        - exposed
        - life
        - relations
        - can-upgrade-to
        - subordinate-to
        - units
        - meter-statuses
        - status
        - workload-version
        - endpoint-bindings
        - public-address
    Binary:
      type: object
      properties:
        Arch:
          type: string
        Build:
          type: integer
        Major:
          type: integer
        Minor:
          type: integer
        Number:
          $ref: "#/components/schemas/Number"
        Patch:
          type: integer
        Release:
          type: string
        Tag:
          type: string
      additionalProperties: false
      required:
        - Major
        - Minor
        - Tag
        - Patch
        - Build
        - Number
        - Release
        - Arch
    BranchStatus:
      type: object
      properties:
        assigned-units:
          type: object
          patternProperties:
            .*:
              type: array
              items:
                type: string
        created:
          type: integer
        created-by:
          type: string
      additionalProperties: false
      required:
        - assigned-units
        - created
        - created-by
    DetailedStatus:
      type: object
      properties:
        data:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        err:
          $ref: "#/components/schemas/Error"
        info:
          type: string
        kind:
          type: string
        life:
          type: string
        since:
          type: string
          format: date-time
        status:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - status
        - info
        - data
        - since
        - kind
        - version
        - life
    EndpointStatus:
      type: object
      properties:
        application:
          type: string
        name:
          type: string
        role:
          type: string
        subordinate:
          type: boolean
      additionalProperties: false
      required:
        - application
        - name
        - role
        - subordinate
    FindToolsParams:
      type: object
      properties:
        agentstream:
          type: string
        arch:
          type: string
        major:
          type: integer
        number:
          $ref: "#/components/schemas/Number"
        os-type:
          type: string
      additionalProperties: false
      required:
        - number
        - major
        - arch
        - os-type
        - agentstream
    FindToolsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        list:
          type: array
          items:
            $ref: "#/components/schemas/Tools"
      additionalProperties: false
      required:
        - list
    FullStatus:
      type: object
      properties:
        applications:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ApplicationStatus"
        branches:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/BranchStatus"
        controller-timestamp:
          type: string
          format: date-time
        machines:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/MachineStatus"
        model:
          $ref: "#/components/schemas/ModelStatusInfo"
        offers:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ApplicationOfferStatus"
        relations:
          type: array
          items:
            $ref: "#/components/schemas/RelationStatus"
        remote-applications:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/RemoteApplicationStatus"
      additionalProperties: false
      required:
        - model
        - machines
        - applications
        - remote-applications
        - offers
        - relations
        - controller-timestamp
        - branches
    History:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/DetailedStatus"
      additionalProperties: false
      required:
        - statuses
    LXDProfile:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: string
        description:
          type: string
        devices:
          type: object
          patternProperties:
            .*:
              type: object
              patternProperties:
                .*:
                  type: string
      additionalProperties: false
      required:
        - config
        - description
        - devices
    MachineStatus:
      type: object
      properties:
        agent-status:
          $ref: "#/components/schemas/DetailedStatus"
        base:
          $ref: "#/components/schemas/Base"
        constraints:
          type: string
        containers:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/MachineStatus"
        display-name:
          type: string
        dns-name:
          type: string
        hardware:
          type: string
        has-vote:
          type: boolean
        hostname:
          type: string
        id:
          type: string
        instance-id:
          type: string
        instance-status:
          $ref: "#/components/schemas/DetailedStatus"
        ip-addresses:
          type: array
          items:
            type: string
        jobs:
          type: array
          items:
            type: string
        lxd-profiles:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/LXDProfile"
        modification-status:
          $ref: "#/components/schemas/DetailedStatus"
        network-interfaces:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/NetworkInterface"
        primary-controller-machine:
          type: boolean
        wants-vote:
          type: boolean
      additionalProperties: false
      required:
        - agent-status
        - instance-status
        - modification-status
        - dns-name
        - instance-id
        - display-name
        - base
        - id
        - containers
        - constraints
        - hardware
        - jobs
        - has-vote
        - wants-vote
    MeterStatus:
      type: object
      properties:
        color:
          type: string
        message:
          type: string
      additionalProperties: false
      required:
        - color
        - message
    ModelStatusInfo:
      type: object
      properties:
        available-version:
          type: string
        cloud-tag:
          type: string
        meter-status:
          $ref: "#/components/schemas/MeterStatus"
        model-status:
          $ref: "#/components/schemas/DetailedStatus"
        name:
          type: string
        region:
          type: string
        sla:
          type: string
        type:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - name
        - type
        - cloud-tag
        - version
        - available-version
        - model-status
        - meter-status
        - sla
    NetworkInterface:
      type: object
      properties:
        dns-nameservers:
          type: array
          items:
            type: string
        gateway:
          type: string
        ip-addresses:
          type: array
          items:
            type: string
        is-up:
          type: boolean
        mac-address:
          type: string
        space:
          type: string
      additionalProperties: false
      required:
        - ip-addresses
        - mac-address
        - is-up
    RelationStatus:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/EndpointStatus"
        id:
          type: integer
        interface:
          type: string
        key:
          type: string
        scope:
          type: string
        status:
          $ref: "#/components/schemas/DetailedStatus"
      additionalProperties: false
      required:
        - id
        - key
        - interface
        - scope
        - endpoints
        - status
    RemoteApplicationStatus:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/RemoteEndpoint"
        err:
          $ref: "#/components/schemas/Error"
        life:
          type: string
        offer-name:
          type: string
        offer-url:
          type: string
        relations:
          type: object
          patternProperties:
            .*:
              type: array
              items:
                type: string
        status:
          $ref: "#/components/schemas/DetailedStatus"
      additionalProperties: false
      required:
        - offer-url
        - offer-name
        - endpoints
        - life
        - relations
        - status
    StatusHistoryFilter:
      type: object
      properties:
        date:
          type: string
          format: date-time
        delta:
          type: integer
        exclude:
          type: array
          items:
            type: string
        size:
          type: integer
      additionalProperties: false
      required:
        - size
        - date
        - delta
        - exclude
    StatusHistoryRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/StatusHistoryFilter"
        historyKind:
          type: string
        size:
          type: integer
        tag:
          type: string
      additionalProperties: false
      required:
        - historyKind
        - size
        - filter
        - tag
    StatusHistoryRequests:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/StatusHistoryRequest"
      additionalProperties: false
      required:
        - requests
    StatusHistoryResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        history:
          $ref: "#/components/schemas/History"
      additionalProperties: false
      required:
        - history
    StatusHistoryResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StatusHistoryResult"
      additionalProperties: false
      required:
        - results
    StatusParams:
      type: object
      properties:
        patterns:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - patterns
    Tools:
      type: object
      properties:
        sha256:
          type: string
        size:
          type: integer
        url:
          type: string
        version:
          $ref: "#/components/schemas/Binary"
      additionalProperties: false
      required:
        - version
        - url
        - size
    UnitStatus:
      type: object
      properties:
        address:
          type: string
        agent-status:
          $ref: "#/components/schemas/DetailedStatus"
        charm:
          type: string
        leader:
          type: boolean
        machine:
          type: string
        opened-ports:
          type: array
          items:
            type: string
        provider-id:
          type: string
        public-address:
          type: string
        subordinates:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/UnitStatus"
        workload-status:
          $ref: "#/components/schemas/DetailedStatus"
        workload-version:
          type: string
      additionalProperties: false
      required:
        - agent-status
        - workload-status
        - workload-version
        - machine
        - opened-ports
        - public-address
        - charm
        - subordinates
    AddCloudArgs:
      type: object
      properties:
        cloud:
          $ref: "#/components/schemas/Cloud"
        force:
          type: boolean
        name:
          type: string
      additionalProperties: false
      required:
        - cloud
        - name
    Cloud:
      type: object
      properties:
        auth-types:
          type: array
          items:
            type: string
        ca-certificates:
          type: array
          items:
            type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        endpoint:
          type: string
        host-cloud-region:
          type: string
        identity-endpoint:
          type: string
        is-controller-cloud:
          type: boolean
        region-config:
          type: object
          patternProperties:
            .*:
              type: object
              patternProperties:
                .*:
                  type: object
                  additionalProperties: true
        regions:
          type: array
          items:
            $ref: "#/components/schemas/CloudRegion"
        skip-tls-verify:
          type: boolean
        storage-endpoint:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
    CloudCredential:
      type: object
      properties:
        attrs:
          type: object
          patternProperties:
            .*:
              type: string
        auth-type:
          type: string
        redacted:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - auth-type
    CloudCredentialArg:
      type: object
      properties:
        cloud-name:
          type: string
        credential-name:
          type: string
      additionalProperties: false
      required:
        - cloud-name
        - credential-name
    CloudCredentialArgs:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/CloudCredentialArg"
        include-secrets:
          type: boolean
      additionalProperties: false
      required:
        - include-secrets
    CloudCredentialResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/CloudCredential"
      additionalProperties: false
    CloudCredentialResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/CloudCredentialResult"
      additionalProperties: false
    CloudDetails:
      type: object
      properties:
        auth-types:
          type: array
          items:
            type: string
        endpoint:
          type: string
        identity-endpoint:
          type: string
        regions:
          type: array
          items:
            $ref: "#/components/schemas/CloudRegion"
        storage-endpoint:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
    CloudInfo:
      type: object
      properties:
        CloudDetails:
          $ref: "#/components/schemas/CloudDetails"
        users:
          type: array
          items:
            $ref: "#/components/schemas/CloudUserInfo"
      additionalProperties: false
      required:
        - CloudDetails
        - users
    CloudInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/CloudInfo"
      additionalProperties: false
    CloudInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/CloudInfoResult"
      additionalProperties: false
      required:
        - results
    CloudInstanceTypesConstraint:
      type: object
      properties:
        cloud-tag:
          type: string
        constraints:
          $ref: "#/components/schemas/Value"
        region:
          type: string
      additionalProperties: false
      required:
        - cloud-tag
        - region
    CloudInstanceTypesConstraints:
      type: object
      properties:
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/CloudInstanceTypesConstraint"
      additionalProperties: false
      required:
        - constraints
    CloudRegion:
      type: object
      properties:
        endpoint:
          type: string
        identity-endpoint:
          type: string
        name:
          type: string
        storage-endpoint:
          type: string
      additionalProperties: false
      required:
        - name
    CloudResult:
      type: object
      properties:
        cloud:
          $ref: "#/components/schemas/Cloud"
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    CloudResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/CloudResult"
      additionalProperties: false
    CloudUserInfo:
      type: object
      properties:
        access:
          type: string
        display-name:
          type: string
        user:
          type: string
      additionalProperties: false
      required:
        - user
        - display-name
        - access
    CloudsResult:
      type: object
      properties:
        clouds:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/Cloud"
      additionalProperties: false
    ControllerCredentialInfo:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/CredentialContent"
        models:
          type: array
          items:
            $ref: "#/components/schemas/ModelAccess"
      additionalProperties: false
    CredentialContent:
      type: object
      properties:
        attrs:
          type: object
          patternProperties:
            .*:
              type: string
        auth-type:
          type: string
        cloud:
          type: string
        name:
          type: string
        valid:
          type: boolean
      additionalProperties: false
      required:
        - name
        - cloud
        - auth-type
    CredentialContentResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ControllerCredentialInfo"
      additionalProperties: false
    CredentialContentResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/CredentialContentResult"
      additionalProperties: false
    InstanceType:
      type: object
      properties:
        arches:
          type: array
          items:
            type: string
        cost:
          type: integer
        cpu-cores:
          type: integer
        deprecated:
          type: boolean
        memory:
          type: integer
        name:
          type: string
        root-disk:
          type: integer
        virt-type:
          type: string
      additionalProperties: false
      required:
        - arches
        - cpu-cores
        - memory
    InstanceTypesResult:
      type: object
      properties:
        cost-currency:
          type: string
        cost-divisor:
          type: integer
        cost-unit:
          type: string
        error:
          $ref: "#/components/schemas/Error"
        instance-types:
          type: array
          items:
            $ref: "#/components/schemas/InstanceType"
      additionalProperties: false
    InstanceTypesResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/InstanceTypesResult"
      additionalProperties: false
      required:
        - results
    ListCloudInfo:
      type: object
      properties:
        CloudDetails:
          $ref: "#/components/schemas/CloudDetails"
        user-access:
          type: string
      additionalProperties: false
      required:
        - CloudDetails
        - user-access
    ListCloudInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ListCloudInfo"
      additionalProperties: false
    ListCloudInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ListCloudInfoResult"
      additionalProperties: false
      required:
        - results
    ListCloudsRequest:
      type: object
      properties:
        all:
          type: boolean
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
    ModelAccess:
      type: object
      properties:
        access:
          type: string
        model:
          type: string
      additionalProperties: false
    ModifyCloudAccess:
      type: object
      properties:
        access:
          type: string
        action:
          type: string
        cloud-tag:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - cloud-tag
        - action
        - access
    ModifyCloudAccessRequest:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/ModifyCloudAccess"
      additionalProperties: false
      required:
        - changes
    RevokeCredentialArg:
      type: object
      properties:
        force:
          type: boolean
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - force
    RevokeCredentialArgs:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/RevokeCredentialArg"
      additionalProperties: false
      required:
        - credentials
    StringsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: array
          items:
            type: string
      additionalProperties: false
    StringsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StringsResult"
      additionalProperties: false
      required:
        - results
    TaggedCredential:
      type: object
      properties:
        credential:
          $ref: "#/components/schemas/CloudCredential"
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - credential
    TaggedCredentials:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/TaggedCredential"
      additionalProperties: false
    UpdateCloudArgs:
      type: object
      properties:
        clouds:
          type: array
          items:
            $ref: "#/components/schemas/AddCloudArgs"
      additionalProperties: false
      required:
        - clouds
    UpdateCredentialArgs:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/TaggedCredential"
        force:
          type: boolean
      additionalProperties: false
      required:
        - credentials
        - force
    UpdateCredentialModelResult:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorResult"
        name:
          type: string
        uuid:
          type: string
      additionalProperties: false
      required:
        - uuid
        - name
    UpdateCredentialResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        models:
          type: array
          items:
            $ref: "#/components/schemas/UpdateCredentialModelResult"
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
    UpdateCredentialResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UpdateCredentialResult"
      additionalProperties: false
    UserCloud:
      type: object
      properties:
        cloud-tag:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - cloud-tag
    UserClouds:
      type: object
      properties:
        user-clouds:
          type: array
          items:
            $ref: "#/components/schemas/UserCloud"
      additionalProperties: false
    CloudSpec:
      type: object
      properties:
        cacertificates:
          type: array
          items:
            type: string
        credential:
          $ref: "#/components/schemas/CloudCredential"
        endpoint:
          type: string
        identity-endpoint:
          type: string
        is-controller-cloud:
          type: boolean
        name:
          type: string
        region:
          type: string
        skip-tls-verify:
          type: boolean
        storage-endpoint:
          type: string
        type:
          type: string
      additionalProperties: false
      required:
        - type
        - name
    CloudSpecResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/CloudSpec"
      additionalProperties: false
    CloudSpecResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/CloudSpecResult"
      additionalProperties: false
    ConfigValue:
      type: object
      properties:
        source:
          type: string
        value:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - value
        - source
    ControllerAPIInfoResult:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        cacert:
          type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - addresses
        - cacert
    ControllerAPIInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ControllerAPIInfoResult"
      additionalProperties: false
      required:
        - results
    ControllerConfigResult:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - config
    ControllerConfigSet:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - config
    ControllerVersionResults:
      type: object
      properties:
        git-commit:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - version
        - git-commit
    DashboardConnectionInfo:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        proxy-connection:
          $ref: "#/components/schemas/Proxy"
        ssh-connection:
          $ref: "#/components/schemas/DashboardConnectionSSHTunnel"
      additionalProperties: false
      required:
        - proxy-connection
        - ssh-connection
    DashboardConnectionSSHTunnel:
      type: object
      properties:
        entity:
          type: string
        host:
          type: string
        model:
          type: string
        port:
          type: string
      additionalProperties: false
      required:
        - host
        - port
    DestroyControllerArgs:
      type: object
      properties:
        destroy-models:
          type: boolean
        destroy-storage:
          type: boolean
        force:
          type: boolean
        max-wait:
          type: integer
        model-timeout:
          type: integer
      additionalProperties: false
      required:
        - destroy-models
    HostedModelConfig:
      type: object
      properties:
        cloud-spec:
          $ref: "#/components/schemas/CloudSpec"
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        error:
          $ref: "#/components/schemas/Error"
        name:
          type: string
        owner:
          type: string
      additionalProperties: false
      required:
        - name
        - owner
    HostedModelConfigsResults:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: "#/components/schemas/HostedModelConfig"
      additionalProperties: false
      required:
        - models
    InitiateMigrationArgs:
      type: object
      properties:
        specs:
          type: array
          items:
            $ref: "#/components/schemas/MigrationSpec"
      additionalProperties: false
      required:
        - specs
    InitiateMigrationResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        migration-id:
          type: string
        model-tag:
          type: string
      additionalProperties: false
      required:
        - model-tag
        - migration-id
    InitiateMigrationResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/InitiateMigrationResult"
      additionalProperties: false
      required:
        - results
    MachineHardware:
      type: object
      properties:
        arch:
          type: string
        availability-zone:
          type: string
        cores:
          type: integer
        cpu-power:
          type: integer
        mem:
          type: integer
        root-disk:
          type: integer
        tags:
          type: array
          items:
            type: string
        virt-type:
          type: string
      additionalProperties: false
    MigrationSpec:
      type: object
      properties:
        model-tag:
          type: string
        target-info:
          $ref: "#/components/schemas/MigrationTargetInfo"
      additionalProperties: false
      required:
        - model-tag
        - target-info
    MigrationTargetInfo:
      type: object
      properties:
        addrs:
          type: array
          items:
            type: string
        auth-tag:
          type: string
        ca-cert:
          type: string
        controller-alias:
          type: string
        controller-tag:
          type: string
        macaroons:
          type: string
        password:
          type: string
      additionalProperties: false
      required:
        - controller-tag
        - addrs
        - ca-cert
        - auth-tag
    Model:
      type: object
      properties:
        name:
          type: string
        owner-tag:
          type: string
        type:
          type: string
        uuid:
          type: string
      additionalProperties: false
      required:
        - name
        - uuid
        - type
        - owner-tag
    ModelApplicationInfo:
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
      required:
        - name
    ModelBlockInfo:
      type: object
      properties:
        blocks:
          type: array
          items:
            type: string
        model-uuid:
          type: string
        name:
          type: string
        owner-tag:
          type: string
      additionalProperties: false
      required:
        - name
        - model-uuid
        - owner-tag
        - blocks
    ModelBlockInfoList:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: "#/components/schemas/ModelBlockInfo"
      additionalProperties: false
    ModelConfigResults:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ConfigValue"
      additionalProperties: false
      required:
        - config
    ModelFilesystemInfo:
      type: object
      properties:
        detachable:
          type: boolean
        id:
          type: string
        message:
          type: string
        provider-id:
          type: string
        status:
          type: string
      additionalProperties: false
      required:
        - id
    ModelMachineInfo:
      type: object
      properties:
        display-name:
          type: string
        ha-primary:
          type: boolean
        hardware:
          $ref: "#/components/schemas/MachineHardware"
        has-vote:
          type: boolean
        id:
          type: string
        instance-id:
          type: string
        message:
          type: string
        status:
          type: string
        wants-vote:
          type: boolean
      additionalProperties: false
      required:
        - id
    ModelStatus:
      type: object
      properties:
        application-count:
          type: integer
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ModelApplicationInfo"
        error:
          $ref: "#/components/schemas/Error"
        filesystems:
          type: array
          items:
            $ref: "#/components/schemas/ModelFilesystemInfo"
        hosted-machine-count:
          type: integer
        life:
          type: string
        machines:
          type: array
          items:
            $ref: "#/components/schemas/ModelMachineInfo"
        model-tag:
          type: string
        owner-tag:
          type: string
        type:
          type: string
        unit-count:
          type: integer
        volumes:
          type: array
          items:
            $ref: "#/components/schemas/ModelVolumeInfo"
      additionalProperties: false
      required:
        - model-tag
        - life
        - type
        - hosted-machine-count
        - application-count
        - unit-count
        - owner-tag
    ModelStatusResults:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: "#/components/schemas/ModelStatus"
      additionalProperties: false
      required:
        - models
    ModelTag:
      type: object
      additionalProperties: false
    ModelVolumeInfo:
      type: object
      properties:
        detachable:
          type: boolean
        id:
          type: string
        message:
          type: string
        provider-id:
          type: string
        status:
          type: string
      additionalProperties: false
      required:
        - id
    ModifyControllerAccess:
      type: object
      properties:
        access:
          type: string
        action:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - action
        - access
    ModifyControllerAccessRequest:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/ModifyControllerAccess"
      additionalProperties: false
      required:
        - changes
    NotifyWatchResult:
      type: object
      properties:
        NotifyWatcherId:
          type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - NotifyWatcherId
    NotifyWatchResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/NotifyWatchResult"
      additionalProperties: false
      required:
        - results
    Proxy:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        type:
          type: string
      additionalProperties: false
      required:
        - config
        - type
    RemoveBlocksArgs:
      type: object
      properties:
        all:
          type: boolean
      additionalProperties: false
      required:
        - all
    SummaryWatcherID:
      type: object
      properties:
        watcher-id:
          type: string
      additionalProperties: false
      required:
        - watcher-id
    UserAccess:
      type: object
      properties:
        access:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - access
    UserAccessResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/UserAccess"
      additionalProperties: false
    UserAccessResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UserAccessResult"
      additionalProperties: false
    UserModel:
      type: object
      properties:
        last-connection:
          type: string
          format: date-time
        model:
          $ref: "#/components/schemas/Model"
      additionalProperties: false
      required:
        - model
        - last-connection
    UserModelList:
      type: object
      properties:
        user-models:
          type: array
          items:
            $ref: "#/components/schemas/UserModel"
      additionalProperties: false
      required:
        - user-models
    InvalidateCredentialArg:
      type: object
      properties:
        reason:
          type: string
      additionalProperties: false
    FirewallRule:
      type: object
      properties:
        known-service:
          type: string
        whitelist-cidrs:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - known-service
    FirewallRuleArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/FirewallRule"
      additionalProperties: false
      required:
        - args
    ListFirewallRulesResults:
      type: object
      properties:
        Rules:
          type: array
          items:
            $ref: "#/components/schemas/FirewallRule"
      additionalProperties: false
      required:
        - Rules
    ControllersChangeResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ControllersChanges"
      additionalProperties: false
      required:
        - result
    ControllersChangeResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ControllersChangeResult"
      additionalProperties: false
      required:
        - results
    ControllersChanges:
      type: object
      properties:
        added:
          type: array
          items:
            type: string
        converted:
          type: array
          items:
            type: string
        maintained:
          type: array
          items:
            type: string
        removed:
          type: array
          items:
            type: string
      additionalProperties: false
    ControllersSpec:
      type: object
      properties:
        constraints:
          $ref: "#/components/schemas/Value"
        num-controllers:
          type: integer
        placement:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - num-controllers
    ControllersSpecs:
      type: object
      properties:
        specs:
          type: array
          items:
            $ref: "#/components/schemas/ControllersSpec"
      additionalProperties: false
      required:
        - specs
    CloudImageMetadata:
      type: object
      properties:
        arch:
          type: string
        image-id:
          type: string
        priority:
          type: integer
        region:
          type: string
        root-storage-size:
          type: integer
        root-storage-type:
          type: string
        source:
          type: string
        stream:
          type: string
        version:
          type: string
        virt-type:
          type: string
      additionalProperties: false
      required:
        - image-id
        - region
        - version
        - arch
        - source
        - priority
    CloudImageMetadataList:
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/CloudImageMetadata"
      additionalProperties: false
    ImageMetadataFilter:
      type: object
      properties:
        arches:
          type: array
          items:
            type: string
        region:
          type: string
        root-storage-type:
          type: string
        stream:
          type: string
        versions:
          type: array
          items:
            type: string
        virt-type:
          type: string
      additionalProperties: false
    ListCloudImageMetadataResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/CloudImageMetadata"
      additionalProperties: false
      required:
        - result
    MetadataImageIds:
      type: object
      properties:
        image-ids:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - image-ids
    MetadataSaveParams:
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/CloudImageMetadataList"
      additionalProperties: false
    ListSSHKeys:
      type: object
      properties:
        entities:
          $ref: "#/components/schemas/Entities"
        mode:
          type: boolean
      additionalProperties: false
      required:
        - entities
        - mode
    ModifyUserSSHKeys:
      type: object
      properties:
        ssh-keys:
          type: array
          items:
            type: string
        user:
          type: string
      additionalProperties: false
      required:
        - user
        - ssh-keys
    AddMachineParams:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        base:
          $ref: "#/components/schemas/Base"
        constraints:
          $ref: "#/components/schemas/Value"
        container-type:
          type: string
        disks:
          type: array
          items:
            $ref: "#/components/schemas/Constraints"
        hardware-characteristics:
          $ref: "#/components/schemas/HardwareCharacteristics"
        instance-id:
          type: string
        jobs:
          type: array
          items:
            type: string
        nonce:
          type: string
        parent-id:
          type: string
        placement:
          $ref: "#/components/schemas/Placement"
      additionalProperties: false
      required:
        - constraints
        - jobs
        - parent-id
        - container-type
        - instance-id
        - nonce
        - hardware-characteristics
        - addresses
    AddMachines:
      type: object
      properties:
        params:
          type: array
          items:
            $ref: "#/components/schemas/AddMachineParams"
      additionalProperties: false
      required:
        - params
    AddMachinesResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        machine:
          type: string
      additionalProperties: false
      required:
        - machine
    AddMachinesResults:
      type: object
      properties:
        machines:
          type: array
          items:
            $ref: "#/components/schemas/AddMachinesResult"
      additionalProperties: false
      required:
        - machines
    DestroyMachineInfo:
      type: object
      properties:
        destroyed-containers:
          type: array
          items:
            $ref: "#/components/schemas/DestroyMachineResult"
        destroyed-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        destroyed-units:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        detached-storage:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        machine-id:
          type: string
      additionalProperties: false
      required:
        - machine-id
    DestroyMachineResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        info:
          $ref: "#/components/schemas/DestroyMachineInfo"
      additionalProperties: false
    DestroyMachineResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/DestroyMachineResult"
      additionalProperties: false
    DestroyMachinesParams:
      type: object
      properties:
        dry-run:
          type: boolean
        force:
          type: boolean
        keep:
          type: boolean
        machine-tags:
          type: array
          items:
            type: string
        max-wait:
          type: integer
      additionalProperties: false
      required:
        - machine-tags
    HardwareCharacteristics:
      type: object
      properties:
        arch:
          type: string
        availability-zone:
          type: string
        cpu-cores:
          type: integer
        cpu-power:
          type: integer
        mem:
          type: integer
        root-disk:
          type: integer
        root-disk-source:
          type: string
        tags:
          type: array
          items:
            type: string
        virt-type:
          type: string
      additionalProperties: false
    ModelInstanceTypesConstraint:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Value"
      additionalProperties: false
    ModelInstanceTypesConstraints:
      type: object
      properties:
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/ModelInstanceTypesConstraint"
      additionalProperties: false
      required:
        - constraints
    ProvisioningScriptParams:
      type: object
      properties:
        data-dir:
          type: string
        disable-package-commands:
          type: boolean
        machine-id:
          type: string
        nonce:
          type: string
      additionalProperties: false
      required:
        - machine-id
        - nonce
        - data-dir
        - disable-package-commands
    ProvisioningScriptResult:
      type: object
      properties:
        script:
          type: string
      additionalProperties: false
      required:
        - script
    RetryProvisioningArgs:
      type: object
      properties:
        all:
          type: boolean
        machines:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - all
    UpgradeSeriesNotificationParam:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Entity"
        watcher-id:
          type: string
      additionalProperties: false
      required:
        - entity
        - watcher-id
    UpgradeSeriesNotificationParams:
      type: object
      properties:
        params:
          type: array
          items:
            $ref: "#/components/schemas/UpgradeSeriesNotificationParam"
      additionalProperties: false
      required:
        - params
    UpgradeSeriesUnitsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        unit-names:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - unit-names
    UpgradeSeriesUnitsResults:
      type: object
      properties:
        Results:
          type: array
          items:
            $ref: "#/components/schemas/UpgradeSeriesUnitsResult"
      additionalProperties: false
      required:
        - Results
    EntityMetrics:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/MetricResult"
      additionalProperties: false
    MeterStatusParam:
      type: object
      properties:
        code:
          type: string
        info:
          type: string
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - code
    MeterStatusParams:
      type: object
      properties:
        statues:
          type: array
          items:
            $ref: "#/components/schemas/MeterStatusParam"
      additionalProperties: false
      required:
        - statues
    MetricResult:
      type: object
      properties:
        key:
          type: string
        labels:
          type: object
          patternProperties:
            .*:
              type: string
        time:
          type: string
          format: date-time
        unit:
          type: string
        value:
          type: string
      additionalProperties: false
      required:
        - time
        - key
        - value
        - unit
        - labels
    MetricResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/EntityMetrics"
      additionalProperties: false
      required:
        - results
    GetConstraintsResults:
      type: object
      properties:
        constraints:
          $ref: "#/components/schemas/Value"
      additionalProperties: false
      required:
        - constraints
    ModelSLA:
      type: object
      properties:
        ModelSLAInfo:
          $ref: "#/components/schemas/ModelSLAInfo"
        creds:
          type: array
          items:
            type: integer
        level:
          type: string
        owner:
          type: string
      additionalProperties: false
      required:
        - level
        - owner
        - ModelSLAInfo
        - creds
    ModelSLAInfo:
      type: object
      properties:
        level:
          type: string
        owner:
          type: string
      additionalProperties: false
      required:
        - level
        - owner
    ModelSequencesResult:
      type: object
      properties:
        sequences:
          type: object
          patternProperties:
            .*:
              type: integer
      additionalProperties: false
      required:
        - sequences
    ModelSet:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - config
    ModelUnset:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - keys
    BoolResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: boolean
      additionalProperties: false
      required:
        - result
    BranchArg:
      type: object
      properties:
        branch:
          type: string
      additionalProperties: false
      required:
        - branch
    BranchInfoArgs:
      type: object
      properties:
        branches:
          type: array
          items:
            type: string
        detailed:
          type: boolean
      additionalProperties: false
      required:
        - branches
        - detailed
    BranchResults:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        generations:
          type: array
          items:
            $ref: "#/components/schemas/Generation"
      additionalProperties: false
      required:
        - generations
    BranchTrackArg:
      type: object
      properties:
        branch:
          type: string
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        num-units:
          type: integer
      additionalProperties: false
      required:
        - branch
        - entities
    Generation:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/GenerationApplication"
        branch:
          type: string
        completed:
          type: integer
        completed-by:
          type: string
        created:
          type: integer
        created-by:
          type: string
        generation-id:
          type: integer
      additionalProperties: false
      required:
        - branch
        - created
        - created-by
        - applications
    GenerationApplication:
      type: object
      properties:
        application:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        pending:
          type: array
          items:
            type: string
        progress:
          type: string
        tracking:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - application
        - progress
        - config
    GenerationId:
      type: object
      properties:
        generation-id:
          type: integer
      additionalProperties: false
      required:
        - generation-id
    GenerationResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        generation:
          $ref: "#/components/schemas/Generation"
      additionalProperties: false
      required:
        - generation
    IntResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: integer
      additionalProperties: false
      required:
        - result
    ChangeModelCredentialParams:
      type: object
      properties:
        credential-tag:
          type: string
        model-tag:
          type: string
      additionalProperties: false
      required:
        - model-tag
        - credential-tag
    ChangeModelCredentialsParams:
      type: object
      properties:
        model-credentials:
          type: array
          items:
            $ref: "#/components/schemas/ChangeModelCredentialParams"
      additionalProperties: false
      required:
        - model-credentials
    DestroyModelParams:
      type: object
      properties:
        destroy-storage:
          type: boolean
        force:
          type: boolean
        max-wait:
          type: integer
        model-tag:
          type: string
        timeout:
          type: integer
      additionalProperties: false
      required:
        - model-tag
    DestroyModelsParams:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: "#/components/schemas/DestroyModelParams"
      additionalProperties: false
      required:
        - models
    DumpModelRequest:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        simplified:
          type: boolean
      additionalProperties: false
      required:
        - entities
        - simplified
    MapResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - result
    MapResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/MapResult"
      additionalProperties: false
      required:
        - results
    ModelCreateArgs:
      type: object
      properties:
        cloud-tag:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        credential:
          type: string
        name:
          type: string
        owner-tag:
          type: string
        region:
          type: string
      additionalProperties: false
      required:
        - name
        - owner-tag
    ModelDefaultValues:
      type: object
      properties:
        cloud-region:
          type: string
        cloud-tag:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
      additionalProperties: false
      required:
        - config
    ModelDefaults:
      type: object
      properties:
        controller:
          type: object
          additionalProperties: true
        default:
          type: object
          additionalProperties: true
        regions:
          type: array
          items:
            $ref: "#/components/schemas/RegionDefaults"
      additionalProperties: false
    ModelDefaultsResult:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/ModelDefaults"
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - config
    ModelDefaultsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ModelDefaultsResult"
      additionalProperties: false
      required:
        - results
    ModelEntityCount:
      type: object
      properties:
        count:
          type: integer
        entity:
          type: string
      additionalProperties: false
      required:
        - entity
        - count
    ModelInfo:
      type: object
      properties:
        agent-version:
          $ref: "#/components/schemas/Number"
        cloud-credential-tag:
          type: string
        cloud-credential-validity:
          type: boolean
        cloud-region:
          type: string
        cloud-tag:
          type: string
        controller-uuid:
          type: string
        default-base:
          type: string
        default-series:
          type: string
        is-controller:
          type: boolean
        life:
          type: string
        machines:
          type: array
          items:
            $ref: "#/components/schemas/ModelMachineInfo"
        migration:
          $ref: "#/components/schemas/ModelMigrationStatus"
        name:
          type: string
        owner-tag:
          type: string
        provider-type:
          type: string
        secret-backends:
          type: array
          items:
            $ref: "#/components/schemas/SecretBackendResult"
        sla:
          $ref: "#/components/schemas/ModelSLAInfo"
        status:
          $ref: "#/components/schemas/EntityStatus"
        supported-features:
          type: array
          items:
            $ref: "#/components/schemas/SupportedFeature"
        type:
          type: string
        users:
          type: array
          items:
            $ref: "#/components/schemas/ModelUserInfo"
        uuid:
          type: string
      additionalProperties: false
      required:
        - name
        - type
        - uuid
        - controller-uuid
        - is-controller
        - cloud-tag
        - owner-tag
        - life
        - users
        - machines
        - secret-backends
        - sla
        - agent-version
    ModelInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ModelInfo"
      additionalProperties: false
    ModelInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ModelInfoResult"
      additionalProperties: false
      required:
        - results
    ModelMigrationStatus:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        status:
          type: string
      additionalProperties: false
      required:
        - status
        - start
    ModelSummariesRequest:
      type: object
      properties:
        all:
          type: boolean
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
    ModelSummary:
      type: object
      properties:
        agent-version:
          $ref: "#/components/schemas/Number"
        cloud-credential-tag:
          type: string
        cloud-region:
          type: string
        cloud-tag:
          type: string
        controller-uuid:
          type: string
        counts:
          type: array
          items:
            $ref: "#/components/schemas/ModelEntityCount"
        default-series:
          type: string
        is-controller:
          type: boolean
        last-connection:
          type: string
          format: date-time
        life:
          type: string
        migration:
          $ref: "#/components/schemas/ModelMigrationStatus"
        name:
          type: string
        owner-tag:
          type: string
        provider-type:
          type: string
        sla:
          $ref: "#/components/schemas/ModelSLAInfo"
        status:
          $ref: "#/components/schemas/EntityStatus"
        type:
          type: string
        user-access:
          type: string
        uuid:
          type: string
      additionalProperties: false
      required:
        - name
        - uuid
        - type
        - controller-uuid
        - is-controller
        - cloud-tag
        - owner-tag
        - life
        - user-access
        - last-connection
        - counts
        - sla
        - agent-version
    ModelSummaryResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ModelSummary"
      additionalProperties: false
    ModelSummaryResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ModelSummaryResult"
      additionalProperties: false
      required:
        - results
    ModelUnsetKeys:
      type: object
      properties:
        cloud-region:
          type: string
        cloud-tag:
          type: string
        keys:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - keys
    ModelUserInfo:
      type: object
      properties:
        access:
          type: string
        display-name:
          type: string
        last-connection:
          type: string
          format: date-time
        model-tag:
          type: string
        user:
          type: string
      additionalProperties: false
      required:
        - model-tag
        - user
        - display-name
        - last-connection
        - access
    ModifyModelAccess:
      type: object
      properties:
        access:
          type: string
        action:
          type: string
        model-tag:
          type: string
        user-tag:
          type: string
      additionalProperties: false
      required:
        - user-tag
        - action
        - access
        - model-tag
    ModifyModelAccessRequest:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/ModifyModelAccess"
      additionalProperties: false
      required:
        - changes
    RegionDefaults:
      type: object
      properties:
        region-name:
          type: string
        value:
          type: object
          additionalProperties: true
      additionalProperties: false
      required:
        - region-name
        - value
    SecretBackend:
      type: object
      properties:
        backend-type:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        name:
          type: string
        token-rotate-interval:
          type: integer
      additionalProperties: false
      required:
        - name
        - backend-type
        - config
    SecretBackendResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        id:
          type: string
        message:
          type: string
        num-secrets:
          type: integer
        result:
          $ref: "#/components/schemas/SecretBackend"
        status:
          type: string
      additionalProperties: false
      required:
        - result
        - id
        - num-secrets
        - status
    SetModelDefaults:
      type: object
      properties:
        config:
          type: array
          items:
            $ref: "#/components/schemas/ModelDefaultValues"
      additionalProperties: false
      required:
        - config
    StringResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StringResult"
      additionalProperties: false
      required:
        - results
    SupportedFeature:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - name
        - description
    UnsetModelDefaults:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: "#/components/schemas/ModelUnsetKeys"
      additionalProperties: false
      required:
        - keys
    ModelParam:
      type: object
      properties:
        model-tag:
          type: string
      additionalProperties: false
      required:
        - model-tag
    UpgradeModelParams:
      type: object
      properties:
        agent-stream:
          type: string
        dry-run:
          type: boolean
        ignore-agent-versions:
          type: boolean
        model-tag:
          type: string
        target-version:
          $ref: "#/components/schemas/Number"
      additionalProperties: false
      required:
        - model-tag
        - target-version
    UpgradeModelResult:
      type: object
      properties:
        chosen-version:
          $ref: "#/components/schemas/Number"
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - chosen-version
    Payload:
      type: object
      properties:
        class:
          type: string
        id:
          type: string
        labels:
          type: array
          items:
            type: string
        machine:
          type: string
        status:
          type: string
        type:
          type: string
        unit:
          type: string
      additionalProperties: false
      required:
        - class
        - type
        - id
        - status
        - labels
        - unit
        - machine
    PayloadListArgs:
      type: object
      properties:
        patterns:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - patterns
    PayloadListResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Payload"
      additionalProperties: false
      required:
        - results
    AddPendingResourcesArgsV2:
      type: object
      properties:
        Entity:
          $ref: "#/components/schemas/Entity"
        charm-origin:
          $ref: "#/components/schemas/CharmOrigin"
        macaroon:
          $ref: "#/components/schemas/Macaroon"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/CharmResource"
        tag:
          type: string
        url:
          type: string
      additionalProperties: false
      required:
        - tag
        - Entity
        - url
        - charm-origin
        - macaroon
        - resources
    AddPendingResourcesResult:
      type: object
      properties:
        ErrorResult:
          $ref: "#/components/schemas/ErrorResult"
        error:
          $ref: "#/components/schemas/Error"
        pending-ids:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - ErrorResult
        - pending-ids
    ListResourcesArgs:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
      additionalProperties: false
      required:
        - entities
    Resource:
      type: object
      properties:
        CharmResource:
          $ref: "#/components/schemas/CharmResource"
        application:
          type: string
        description:
          type: string
        fingerprint:
          type: array
          items:
            type: integer
        id:
          type: string
        name:
          type: string
        origin:
          type: string
        path:
          type: string
        pending-id:
          type: string
        revision:
          type: integer
        size:
          type: integer
        timestamp:
          type: string
          format: date-time
        type:
          type: string
        username:
          type: string
      additionalProperties: false
      required:
        - name
        - type
        - path
        - origin
        - revision
        - fingerprint
        - size
        - CharmResource
        - id
        - pending-id
        - application
        - username
        - timestamp
    ResourcesResult:
      type: object
      properties:
        ErrorResult:
          $ref: "#/components/schemas/ErrorResult"
        charm-store-resources:
          type: array
          items:
            $ref: "#/components/schemas/CharmResource"
        error:
          $ref: "#/components/schemas/Error"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        unit-resources:
          type: array
          items:
            $ref: "#/components/schemas/UnitResources"
      additionalProperties: false
      required:
        - ErrorResult
        - resources
        - charm-store-resources
        - unit-resources
    ResourcesResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ResourcesResult"
      additionalProperties: false
      required:
        - results
    UnitResources:
      type: object
      properties:
        Entity:
          $ref: "#/components/schemas/Entity"
        download-progress:
          type: object
          patternProperties:
            .*:
              type: integer
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - Entity
        - resources
        - download-progress
    SSHAddressResult:
      type: object
      properties:
        address:
          type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    SSHAddressResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SSHAddressResult"
      additionalProperties: false
      required:
        - results
    SSHAddressesResult:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
      required:
        - addresses
    SSHAddressesResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SSHAddressesResult"
      additionalProperties: false
      required:
        - results
    SSHProxyResult:
      type: object
      properties:
        use-proxy:
          type: boolean
      additionalProperties: false
      required:
        - use-proxy
    SSHPublicKeysResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        public-keys:
          type: array
          items:
            type: string
      additionalProperties: false
    SSHPublicKeysResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SSHPublicKeysResult"
      additionalProperties: false
      required:
        - results
    AddSecretBackendArg:
      type: object
      properties:
        SecretBackend:
          $ref: "#/components/schemas/SecretBackend"
        backend-type:
          type: string
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        id:
          type: string
        name:
          type: string
        token-rotate-interval:
          type: integer
      additionalProperties: false
      required:
        - name
        - backend-type
        - config
        - SecretBackend
    AddSecretBackendArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/AddSecretBackendArg"
      additionalProperties: false
      required:
        - args
    ListSecretBackendsArgs:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        reveal:
          type: boolean
      additionalProperties: false
      required:
        - names
        - reveal
    ListSecretBackendsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SecretBackendResult"
      additionalProperties: false
      required:
        - results
    RemoveSecretBackendArg:
      type: object
      properties:
        force:
          type: boolean
        name:
          type: string
      additionalProperties: false
      required:
        - name
    RemoveSecretBackendArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/RemoveSecretBackendArg"
      additionalProperties: false
      required:
        - args
    UpdateSecretBackendArg:
      type: object
      properties:
        config:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        force:
          type: boolean
        name:
          type: string
        name-change:
          type: string
        reset:
          type: array
          items:
            type: string
        token-rotate-interval:
          type: integer
      additionalProperties: false
      required:
        - name
        - token-rotate-interval
        - config
        - reset
    UpdateSecretBackendArgs:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/UpdateSecretBackendArg"
      additionalProperties: false
      required:
        - args
    ListSecretResult:
      type: object
      properties:
        create-time:
          type: string
          format: date-time
        description:
          type: string
        label:
          type: string
        latest-expire-time:
          type: string
          format: date-time
        latest-revision:
          type: integer
        next-rotate-time:
          type: string
          format: date-time
        owner-tag:
          type: string
        revisions:
          type: array
          items:
            $ref: "#/components/schemas/SecretRevision"
        rotate-policy:
          type: string
        update-time:
          type: string
          format: date-time
        uri:
          type: string
        value:
          $ref: "#/components/schemas/SecretValueResult"
        version:
          type: integer
      additionalProperties: false
      required:
        - uri
        - version
        - owner-tag
        - latest-revision
        - create-time
        - update-time
        - revisions
    ListSecretResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ListSecretResult"
      additionalProperties: false
      required:
        - results
    ListSecretsArgs:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/SecretsFilter"
        show-secrets:
          type: boolean
      additionalProperties: false
      required:
        - show-secrets
        - filter
    SecretRevision:
      type: object
      properties:
        backend-name:
          type: string
        create-time:
          type: string
          format: date-time
        expire-time:
          type: string
          format: date-time
        revision:
          type: integer
        update-time:
          type: string
          format: date-time
        value-ref:
          $ref: "#/components/schemas/SecretValueRef"
      additionalProperties: false
      required:
        - revision
    SecretValueRef:
      type: object
      properties:
        backend-id:
          type: string
        revision-id:
          type: string
      additionalProperties: false
      required:
        - backend-id
        - revision-id
    SecretValueResult:
      type: object
      properties:
        data:
          type: object
          patternProperties:
            .*:
              type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    SecretsFilter:
      type: object
      properties:
        owner-tag:
          type: string
        revision:
          type: integer
        uri:
          type: string
      additionalProperties: false
    CreateSpaceParams:
      type: object
      properties:
        cidrs:
          type: array
          items:
            type: string
        provider-id:
          type: string
        public:
          type: boolean
        space-tag:
          type: string
      additionalProperties: false
      required:
        - cidrs
        - space-tag
        - public
    CreateSpacesParams:
      type: object
      properties:
        spaces:
          type: array
          items:
            $ref: "#/components/schemas/CreateSpaceParams"
      additionalProperties: false
      required:
        - spaces
    ListSpacesResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Space"
      additionalProperties: false
      required:
        - results
    MoveSubnetsParam:
      type: object
      properties:
        force:
          type: boolean
        space-tag:
          type: string
        subnets:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - subnets
        - space-tag
        - force
    MoveSubnetsParams:
      type: object
      properties:
        args:
          type: array
          items:
            $ref: "#/components/schemas/MoveSubnetsParam"
      additionalProperties: false
      required:
        - args
    MoveSubnetsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        moved-subnets:
          type: array
          items:
            $ref: "#/components/schemas/MovedSubnet"
        new-space:
          type: string
      additionalProperties: false
      required:
        - new-space
    MoveSubnetsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/MoveSubnetsResult"
      additionalProperties: false
      required:
        - results
    MovedSubnet:
      type: object
      properties:
        cidr:
          type: string
        old-space:
          type: string
        subnet:
          type: string
      additionalProperties: false
      required:
        - subnet
        - old-space
        - cidr
    RemoveSpaceParam:
      type: object
      properties:
        dry-run:
          type: boolean
        force:
          type: boolean
        space:
          $ref: "#/components/schemas/Entity"
      additionalProperties: false
      required:
        - space
    RemoveSpaceParams:
      type: object
      properties:
        space-param:
          type: array
          items:
            $ref: "#/components/schemas/RemoveSpaceParam"
      additionalProperties: false
      required:
        - space-param
    RemoveSpaceResult:
      type: object
      properties:
        bindings:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        controller-settings:
          type: array
          items:
            type: string
        error:
          $ref: "#/components/schemas/Error"
      additionalProperties: false
    RemoveSpaceResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/RemoveSpaceResult"
      additionalProperties: false
      required:
        - results
    RenameSpaceParams:
      type: object
      properties:
        from-space-tag:
          type: string
        to-space-tag:
          type: string
      additionalProperties: false
      required:
        - from-space-tag
        - to-space-tag
    RenameSpacesParams:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/RenameSpaceParams"
      additionalProperties: false
      required:
        - changes
    ShowSpaceResult:
      type: object
      properties:
        applications:
          type: array
          items:
            type: string
        error:
          $ref: "#/components/schemas/Error"
        machine-count:
          type: integer
        space:
          $ref: "#/components/schemas/Space"
      additionalProperties: false
      required:
        - space
        - applications
        - machine-count
    ShowSpaceResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ShowSpaceResult"
      additionalProperties: false
      required:
        - results
    Space:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        id:
          type: string
        name:
          type: string
        subnets:
          type: array
          items:
            $ref: "#/components/schemas/Subnet"
      additionalProperties: false
      required:
        - id
        - name
        - subnets
    AddStorageDetails:
      type: object
      properties:
        storage-tags:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - storage-tags
    AddStorageResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/AddStorageDetails"
      additionalProperties: false
    AddStorageResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AddStorageResult"
      additionalProperties: false
      required:
        - results
    BulkImportStorageParams:
      type: object
      properties:
        storage:
          type: array
          items:
            $ref: "#/components/schemas/ImportStorageParams"
      additionalProperties: false
      required:
        - storage
    FilesystemAttachmentDetails:
      type: object
      properties:
        FilesystemAttachmentInfo:
          $ref: "#/components/schemas/FilesystemAttachmentInfo"
        life:
          type: string
        mount-point:
          type: string
        read-only:
          type: boolean
      additionalProperties: false
      required:
        - FilesystemAttachmentInfo
    FilesystemAttachmentInfo:
      type: object
      properties:
        mount-point:
          type: string
        read-only:
          type: boolean
      additionalProperties: false
    FilesystemDetails:
      type: object
      properties:
        filesystem-tag:
          type: string
        info:
          $ref: "#/components/schemas/FilesystemInfo"
        life:
          type: string
        machine-attachments:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/FilesystemAttachmentDetails"
        status:
          $ref: "#/components/schemas/EntityStatus"
        storage:
          $ref: "#/components/schemas/StorageDetails"
        unit-attachments:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/FilesystemAttachmentDetails"
        volume-tag:
          type: string
      additionalProperties: false
      required:
        - filesystem-tag
        - info
        - status
    FilesystemDetailsListResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: array
          items:
            $ref: "#/components/schemas/FilesystemDetails"
      additionalProperties: false
    FilesystemDetailsListResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/FilesystemDetailsListResult"
      additionalProperties: false
    FilesystemFilter:
      type: object
      properties:
        machines:
          type: array
          items:
            type: string
      additionalProperties: false
    FilesystemFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/FilesystemFilter"
      additionalProperties: false
    FilesystemInfo:
      type: object
      properties:
        filesystem-id:
          type: string
        pool:
          type: string
        size:
          type: integer
      additionalProperties: false
      required:
        - filesystem-id
        - pool
        - size
    ImportStorageDetails:
      type: object
      properties:
        storage-tag:
          type: string
      additionalProperties: false
      required:
        - storage-tag
    ImportStorageParams:
      type: object
      properties:
        kind:
          type: integer
        pool:
          type: string
        provider-id:
          type: string
        storage-name:
          type: string
      additionalProperties: false
      required:
        - kind
        - pool
        - provider-id
        - storage-name
    ImportStorageResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ImportStorageDetails"
      additionalProperties: false
    ImportStorageResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ImportStorageResult"
      additionalProperties: false
      required:
        - results
    RemoveStorage:
      type: object
      properties:
        storage:
          type: array
          items:
            $ref: "#/components/schemas/RemoveStorageInstance"
      additionalProperties: false
      required:
        - storage
    RemoveStorageInstance:
      type: object
      properties:
        destroy-attachments:
          type: boolean
        destroy-storage:
          type: boolean
        force:
          type: boolean
        max-wait:
          type: integer
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
    StorageAddParams:
      type: object
      properties:
        name:
          type: string
        storage:
          $ref: "#/components/schemas/StorageConstraints"
        unit:
          type: string
      additionalProperties: false
      required:
        - unit
        - name
        - storage
    StorageAttachmentDetails:
      type: object
      properties:
        life:
          type: string
        location:
          type: string
        machine-tag:
          type: string
        storage-tag:
          type: string
        unit-tag:
          type: string
      additionalProperties: false
      required:
        - storage-tag
        - unit-tag
        - machine-tag
    StorageAttachmentId:
      type: object
      properties:
        storage-tag:
          type: string
        unit-tag:
          type: string
      additionalProperties: false
      required:
        - storage-tag
        - unit-tag
    StorageAttachmentIds:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: "#/components/schemas/StorageAttachmentId"
      additionalProperties: false
      required:
        - ids
    StorageDetachmentParams:
      type: object
      properties:
        force:
          type: boolean
        ids:
          $ref: "#/components/schemas/StorageAttachmentIds"
        max-wait:
          type: integer
      additionalProperties: false
      required:
        - ids
    StorageDetails:
      type: object
      properties:
        attachments:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/StorageAttachmentDetails"
        kind:
          type: integer
        life:
          type: string
        owner-tag:
          type: string
        persistent:
          type: boolean
        status:
          $ref: "#/components/schemas/EntityStatus"
        storage-tag:
          type: string
      additionalProperties: false
      required:
        - storage-tag
        - owner-tag
        - kind
        - status
        - persistent
    StorageDetailsListResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: array
          items:
            $ref: "#/components/schemas/StorageDetails"
      additionalProperties: false
    StorageDetailsListResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StorageDetailsListResult"
      additionalProperties: false
    StorageDetailsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/StorageDetails"
      additionalProperties: false
    StorageDetailsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StorageDetailsResult"
      additionalProperties: false
    StorageFilter:
      type: object
      additionalProperties: false
    StorageFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/StorageFilter"
      additionalProperties: false
    StoragePool:
      type: object
      properties:
        attrs:
          type: object
          patternProperties:
            .*:
              type: object
              additionalProperties: true
        name:
          type: string
        provider:
          type: string
      additionalProperties: false
      required:
        - name
        - provider
        - attrs
    StoragePoolArgs:
      type: object
      properties:
        pools:
          type: array
          items:
            $ref: "#/components/schemas/StoragePool"
      additionalProperties: false
      required:
        - pools
    StoragePoolDeleteArg:
      type: object
      properties:
        name:
          type: string
      additionalProperties: false
      required:
        - name
    StoragePoolDeleteArgs:
      type: object
      properties:
        pools:
          type: array
          items:
            $ref: "#/components/schemas/StoragePoolDeleteArg"
      additionalProperties: false
      required:
        - pools
    StoragePoolFilter:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        providers:
          type: array
          items:
            type: string
      additionalProperties: false
    StoragePoolFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/StoragePoolFilter"
      additionalProperties: false
    StoragePoolsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        storage-pools:
          type: array
          items:
            $ref: "#/components/schemas/StoragePool"
      additionalProperties: false
    StoragePoolsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StoragePoolsResult"
      additionalProperties: false
    StoragesAddParams:
      type: object
      properties:
        storages:
          type: array
          items:
            $ref: "#/components/schemas/StorageAddParams"
      additionalProperties: false
      required:
        - storages
    VolumeAttachmentDetails:
      type: object
      properties:
        VolumeAttachmentInfo:
          $ref: "#/components/schemas/VolumeAttachmentInfo"
        bus-address:
          type: string
        device-link:
          type: string
        device-name:
          type: string
        life:
          type: string
        plan-info:
          $ref: "#/components/schemas/VolumeAttachmentPlanInfo"
        read-only:
          type: boolean
      additionalProperties: false
      required:
        - VolumeAttachmentInfo
    VolumeAttachmentInfo:
      type: object
      properties:
        bus-address:
          type: string
        device-link:
          type: string
        device-name:
          type: string
        plan-info:
          $ref: "#/components/schemas/VolumeAttachmentPlanInfo"
        read-only:
          type: boolean
      additionalProperties: false
    VolumeAttachmentPlanInfo:
      type: object
      properties:
        device-attributes:
          type: object
          patternProperties:
            .*:
              type: string
        device-type:
          type: string
      additionalProperties: false
    VolumeDetails:
      type: object
      properties:
        info:
          $ref: "#/components/schemas/VolumeInfo"
        life:
          type: string
        machine-attachments:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/VolumeAttachmentDetails"
        status:
          $ref: "#/components/schemas/EntityStatus"
        storage:
          $ref: "#/components/schemas/StorageDetails"
        unit-attachments:
          type: object
          patternProperties:
            .*:
              $ref: "#/components/schemas/VolumeAttachmentDetails"
        volume-tag:
          type: string
      additionalProperties: false
      required:
        - volume-tag
        - info
        - status
    VolumeDetailsListResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          type: array
          items:
            $ref: "#/components/schemas/VolumeDetails"
      additionalProperties: false
    VolumeDetailsListResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/VolumeDetailsListResult"
      additionalProperties: false
    VolumeFilter:
      type: object
      properties:
        machines:
          type: array
          items:
            type: string
      additionalProperties: false
    VolumeFilters:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/VolumeFilter"
      additionalProperties: false
    VolumeInfo:
      type: object
      properties:
        hardware-id:
          type: string
        persistent:
          type: boolean
        pool:
          type: string
        size:
          type: integer
        volume-id:
          type: string
        wwn:
          type: string
      additionalProperties: false
      required:
        - volume-id
        - size
        - persistent
    CIDRParams:
      type: object
      properties:
        cidrs:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - cidrs
    ListSubnetsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Subnet"
      additionalProperties: false
      required:
        - results
    SubnetV2:
      type: object
      properties:
        Subnet:
          $ref: "#/components/schemas/Subnet"
        cidr:
          type: string
        id:
          type: string
        life:
          type: string
        provider-id:
          type: string
        provider-network-id:
          type: string
        provider-space-id:
          type: string
        space-tag:
          type: string
        status:
          type: string
        vlan-tag:
          type: integer
        zones:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - cidr
        - vlan-tag
        - life
        - space-tag
        - zones
        - Subnet
    SubnetsFilters:
      type: object
      properties:
        space-tag:
          type: string
        zone:
          type: string
      additionalProperties: false
    SubnetsResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        subnets:
          type: array
          items:
            $ref: "#/components/schemas/SubnetV2"
      additionalProperties: false
    SubnetsResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SubnetsResult"
      additionalProperties: false
      required:
        - results
    ZoneResult:
      type: object
      properties:
        available:
          type: boolean
        error:
          $ref: "#/components/schemas/Error"
        name:
          type: string
      additionalProperties: false
      required:
        - name
        - available
    ZoneResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ZoneResult"
      additionalProperties: false
      required:
        - results
    AddUser:
      type: object
      properties:
        display-name:
          type: string
        password:
          type: string
        username:
          type: string
      additionalProperties: false
      required:
        - username
        - display-name
    AddUserResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        secret-key:
          type: array
          items:
            type: integer
        tag:
          type: string
      additionalProperties: false
    AddUserResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AddUserResult"
      additionalProperties: false
      required:
        - results
    AddUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/AddUser"
      additionalProperties: false
      required:
        - users
    EntityPassword:
      type: object
      properties:
        password:
          type: string
        tag:
          type: string
      additionalProperties: false
      required:
        - tag
        - password
    EntityPasswords:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/EntityPassword"
      additionalProperties: false
      required:
        - changes
    ModelUserInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/ModelUserInfo"
      additionalProperties: false
    ModelUserInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ModelUserInfoResult"
      additionalProperties: false
      required:
        - results
    UserInfo:
      type: object
      properties:
        access:
          type: string
        created-by:
          type: string
        date-created:
          type: string
          format: date-time
        disabled:
          type: boolean
        display-name:
          type: string
        last-connection:
          type: string
          format: date-time
        username:
          type: string
      additionalProperties: false
      required:
        - username
        - display-name
        - access
        - created-by
        - date-created
        - disabled
    UserInfoRequest:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        include-disabled:
          type: boolean
      additionalProperties: false
      required:
        - entities
        - include-disabled
    UserInfoResult:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        result:
          $ref: "#/components/schemas/UserInfo"
      additionalProperties: false
    UserInfoResults:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UserInfoResult"
      additionalProperties: false
      required:
        - results
